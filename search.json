[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TLS",
    "section": "",
    "text": "Contents"
  },
  {
    "objectID": "geo-01-quality.html",
    "href": "geo-01-quality.html",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(scran)\nlibrary(scater)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\np <- file.path(\"..\", \"data\", \"GeoMx\")\ny <- read.csv(\n  file.path(p, \"counts.csv\"), \n  row.names = 1, check.names = FALSE)\nrd <- read.csv(\n  file.path(p, \"rowmd.csv\"), \n  row.names = 1, check.names = FALSE)\ncd <- read.csv(\n  file.path(p, \"colmd.csv\"), \n  row.names = 1, check.names = FALSE)\n\n\n\n\n\n\n\nCode\n# fix/simplify sample metadata\nnames(cd)[ncol(cd)] <- \"LOQ\"\nnames(cd) <- gsub(\"_ty\", \"_Ty\", names(cd))\nnames(cd) <- gsub(\"_\", \"\", names(cd))\n# construct SCE\n(sce <- SingleCellExperiment(\n  list(counts = as.matrix(y)),\n  rowData = rd, colData = cd))\n\n\nclass: SingleCellExperiment \ndim: 18677 322 \nmetadata(0):\nassays(1): counts\nrownames(18677): UBXN6 KTN1 ... CBLN2 ARPC5\nrowData names(12): HUGOSymbol TargetGroup ... NumberOfProbesTotal\n  GeneID\ncolnames(322): LSCC1_20210505 | 001 | immune LSCC1_20210505 | 002 |\n  immune ... RCC2_20210405 | 060 | Geometric Segment RCC2_20210405 |\n  061 | Geometric Segment\ncolData names(34): SlideName ScanLabel ... ScanOffsetY LOQ\nreducedDimNames(0):\nmainExpName: NULL\naltExpNames(0):\n\n\n\n\n\n\n\n\nCode\n# total positive/negative probe counts\nis_np <- rowData(sce)$CodeClass == \"Negative\"\nsce$neg <- colSums(counts(sce[ is_np, ]))\nsce$pos <- colSums(counts(sce[!is_np, ]))\n# drop negative probes & outliers\nsce <- sce[!is_np,\n    sce$neg < 500 &\n    sce$RawReads >= 100 &\n    sce$AOINucleiCount >= 5]\n# drop LNmet (single sample) & TLSep\nsce <- sce[, -grep(\"LNmet\", sce$TissueType)]\n# test whether or not features\n# lie above sample-specific LOQ\nloq <- sweep(assay(sce), 2, sce$LOQ, `>`)\n# keep samples with at least 5% of genes > LOQ\ntable(cs <- colMeans(loq) >= 0.05)\n\n\n\nFALSE  TRUE \n   90   229 \n\n\nCode\nsce <- sce[, cs]; loq <- loq[, cs]\n# keep genes > LOQ in at least\n# 10% of samples (by tumor type)\ngs <- by(t(loq), sce$TumorType, \\(.)\n    colnames(.)[colMeans(.) >= 0.1])\nsapply(gs, length)\n\n\nLSCC  RCC \n3295 3213 \n\n\nCode\ngs <- unique(unlist(gs))\ndim(sce <- sce[gs, ])\n\n\n[1] 3710  229\n\n\n\n\nCode\n# add broader subtype labels\nsce$TissueSub <- sce$TissueSubtype\nsce$TissueSub[grep(\"^LN\", sce$TissueType)] <- \"LN\"\nsce$TissueSub[grep(\"^SFL_TLS\", sce$TissueSubtype)] <- \"SFL_TLS\"\n# reorder factors of interest\nsce$TissueType <- factor(sce$TissueType, c(\n    \"TLS\", \"LN\", \"Alv\", \"Kid\", \"Tum\"))\nsce$TissueSub <- factor(sce$TissueSub, c(\n    \"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\", \n    \"LN\", \"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\ncd <- data.frame(colData(sce))\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(RawReads, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(RawReads, AOINucleiCount, col = TissueType)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = TissueType)) +\n  plot_layout(nrow = 2, guides = \"collect\") & \n  scale_x_log10() & scale_y_log10() &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  theme_bw() & theme(\n      panel.grid.minor = element_blank(),\n      legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\nalv <- cd$TissueType == \"Alv\"\nggplot(cd, aes(RawReads, col = SlideName)) +\nggplot(cd, aes(RawReads, col = PatientID)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueType)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueSubtype)) +\n  plot_layout(nrow = 2) &\n  geom_density(key_glyph = \"point\") & \n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  scale_x_log10() & theme_bw() & theme(\n    legend.justification = c(0, 0.5),\n    legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndgl <- calcNormFactors(sce)\ny <- cpm.DGEList(dgl, log = FALSE)\nz <- cpm.DGEList(dgl, log = TRUE )\nassay(sce, \"normcounts\") <- y\nassay(sce, \"logcounts\" ) <- z\n\n\n\n\n\n\n\nCode\ntbl <- modelGeneVar(sce, block = sce$PatientID)\nrowData(sce)$hvg <- (hvg <- tbl$bio > 0)\n\n\n\n\n\n\n\nCode\nsce <- runPCA(sce, subset_row = hvg)\ndr <- reducedDim(sce)\ncd <- data.frame(cd, dr)\n\n\n\n\n\n\n\n\n\n\nCode\nvar <- c(\"AOINucleiCount\", \"AOISurfaceArea\", \"LOQ\", \"TumorType\", \n    \"TissueSub\", \"SlideName\", \"PatientID\", \"PatientCategory\") \n(pve <- plotExplanatoryVariables(sce, variables = var))\n\n\n\n\n\n\n\n\n\ndiscretecontinuous\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = SlideName)) +\nggplot(cd, aes(PC1, PC2, col = TumorType)) +\nggplot(cd, aes(PC1, PC2, col = TissueType)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n    ncol = 2, title.position = \"top\",\n    override.aes = list(size = 3, alpha = 1))) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = RawReads)) +\nggplot(cd, aes(PC1, PC2, col = AOISurfaceArea)) +\nggplot(cd, aes(PC1, PC2, col = AOINucleiCount)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  scale_color_viridis_c(trans = \"log10\") &\n  guides(color = guide_colorbar(title.position = \"top\")) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.width = unit(2, \"lines\"),\n    legend.key.height = unit(0.5, \"lines\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfor (. in c(\"TissueType\", \"TissueSub\")) {\n    cat(\"####\", ., \"\\n\\n\")\n    ns <- table(PatientID = sce$PatientID, sce[[.]])\n    ns <- as.data.frame(ns); names(ns)[2] <- .\n    ns$TumorType <- sce$TumorType[match(ns$PatientID, sce$PatientID)]\n    pal <- hcl.colors(nlevels(sce[[.]]), \"Spectral\")\n    gg <- ggplot(ns, \n        aes(PatientID, Freq, fill = .data[[.]])) +\n        geom_bar(stat = \"identity\", position = \"stack\") +\n        facet_grid(~TumorType, scales = \"free_x\") +\n        labs(x = \"Patient ID\", y = \"# AOIs\") + \n        scale_fill_manual(values = pal) +\n        theme_bw() + theme(\n            aspect.ratio = 1,\n            panel.grid = element_blank(),\n            legend.key.size = unit(0.5, \"lines\"),\n            axis.text.x = element_text(angle = 30, hjust = 1))\n    print(gg); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(sce, file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] patchwork_1.1.2             scater_1.28.0              \n [3] ggplot2_3.4.2               scran_1.28.1               \n [5] scuttle_1.10.1              SingleCellExperiment_1.22.0\n [7] SummarizedExperiment_1.30.1 Biobase_2.60.0             \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.0        \n[11] IRanges_2.34.0              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         MatrixGenerics_1.12.0      \n[15] matrixStats_0.63.0          edgeR_3.42.2               \n[17] limma_3.56.1               \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0          viridisLite_0.4.2        \n [3] dplyr_1.1.2               vipor_0.4.5              \n [5] farver_2.1.1              viridis_0.6.3            \n [7] bitops_1.0-7              fastmap_1.1.1            \n [9] RCurl_1.98-1.12           bluster_1.10.0           \n[11] digest_0.6.31             rsvd_1.0.5               \n[13] lifecycle_1.0.3           cluster_2.1.4            \n[15] statmod_1.5.0             magrittr_2.0.3           \n[17] compiler_4.3.0            rlang_1.1.1              \n[19] tools_4.3.0               igraph_1.4.2             \n[21] utf8_1.2.3                yaml_2.3.7               \n[23] knitr_1.42                labeling_0.4.2           \n[25] S4Arrays_1.0.4            dqrng_0.3.0              \n[27] htmlwidgets_1.6.2         DelayedArray_0.26.3      \n[29] BiocParallel_1.34.2       withr_2.5.0              \n[31] grid_4.3.0                fansi_1.0.4              \n[33] beachmat_2.16.0           colorspace_2.1-0         \n[35] scales_1.2.1              cli_3.6.1                \n[37] rmarkdown_2.21            crayon_1.5.2             \n[39] generics_0.1.3            metapod_1.8.0            \n[41] rstudioapi_0.14           DelayedMatrixStats_1.22.0\n[43] ggbeeswarm_0.7.2          zlibbioc_1.46.0          \n[45] parallel_4.3.0            XVector_0.40.0           \n[47] vctrs_0.6.2               Matrix_1.5-4.1           \n[49] jsonlite_1.8.4            BiocSingular_1.16.0      \n[51] BiocNeighbors_1.18.0      ggrepel_0.9.3            \n[53] irlba_2.3.5.1             beeswarm_0.4.0           \n[55] locfit_1.5-9.7            glue_1.6.2               \n[57] codetools_0.2-19          cowplot_1.1.1            \n[59] gtable_0.3.3              ScaledMatrix_1.8.1       \n[61] munsell_0.5.0             tibble_3.2.1             \n[63] pillar_1.9.0              htmltools_0.5.5          \n[65] GenomeInfoDbData_1.2.10   R6_2.5.1                 \n[67] sparseMatrixStats_1.12.0  evaluate_0.21            \n[69] lattice_0.21-8            Rcpp_1.0.10              \n[71] gridExtra_2.3             xfun_0.39                \n[73] pkgconfig_2.0.3"
  },
  {
    "objectID": "geo-02-differential.html",
    "href": "geo-02-differential.html",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scuttle)\nlibrary(pheatmap)\nlibrary(patchwork)\nlibrary(ggbeeswarm)\nlibrary(EnhancedVolcano)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\nsce <- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\nCode\n.volcano <- \\(df, title, fdr = 0.05, lfc = 1) {\n  EnhancedVolcano(df, \n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = title, subtitle = NULL,\n    lab = df[[\"gene\"]], labSize = 2, \n    drawConnectors = TRUE, widthConnectors = 0.5) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) + theme(\n    aspect.ratio = 1,\n    legend.title = element_blank(),\n    panel.grid.minor = element_blank())\n}\n\n\n\n\n\n\n\n\nCode\n# exclude LN for DGE analysis\nsub <- sce[, sce$TissueSub != \"LN\"]\ndf <- data.frame(colData(sub), t(logcounts(sub)), check.names = FALSE)\ngg <- pivot_longer(df, any_of(rownames(sub)), names_to = \"gene\", values_to = \"expr\")\n\n\n\n\nCode\n# setup subtype groupings\nnames(kid) <- kid <- c(\"Kidney\", \"RCC\")\nnames(lun) <- lun <- c(\"Alveoles\", \"LSCC\")\nnames(tls) <- tls <- c(\"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\")\n# split by tumor type\ndat <- c(list(\n    RCC = sub[, sub$TumorType == \"RCC\"], \n    LSCC = sub[, sub$TumorType == \"LSCC\"]),\n    lapply(tls, \\(.) sub[, sub$TissueSub == .]))\n\n\n\n\nCode\nref <- c(\n    RCC = unname(kid[1]), \n    LSCC = unname(lun[1]), \n    sapply(tls, \\(.) \"LSCC\"))\nnames(ids) <- ids <- names(dat)\ndat <- dat[ids]; ref <- ref[ids]\nfit <- lapply(ids, \\(.) {\n    # setup design matrix\n    df <- data.frame(colData(dat[[.]]))\n    if (. %in% tls) {\n        tt <- factor(df$TumorType)\n        df$TumorType <- relevel(tt, ref[.])\n        mm <- model.matrix(~0+TumorType, df)\n        colnames(mm) <- gsub(\"TumorType\", \"\", colnames(mm))\n    } else {\n        st <- droplevels(df$TissueSub)\n        df$TissueSub <- relevel(st, ref[.])\n        mm <- model.matrix(~0+TissueSub, df)\n        colnames(mm) <- gsub(\"TissueSub\", \"\", colnames(mm))\n    }\n    # fit GLM model\n    dgl <- DGEList(assay(dat[[.]]))\n    dgl <- calcNormFactors(dgl)\n    dgl <- estimateDisp(dgl, mm)\n    fit <- glmQLFit(dgl, mm)\n})\n\n\n\n\nCode\n# setup contrasts\ncs <- c(list(\n    # within tumor types\n    RCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(kid, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(kid, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\"))),\n    LSCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(lun, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(lun, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\")))),\n    # across tumor types, within TLS subsets\n    lapply(tls, \\(.) setNames(list(\"RCC\"), .)))\ncs <- lapply(ids, \\(.) {\n    x <- numeric(ncol(mm <- fit[[.]]$design))\n    lapply(cs[[.]], \\(c) {\n        if (length(c) == 1) {\n            i <- match(c, colnames(mm))\n            x[i] <- 1; x[-i] <- -1\n        } else {\n            a <- match(c[[1]], colnames(mm))\n            b <- match(c[[2]], colnames(mm))\n            x[a] <- -1/sum(a != 0)\n            x[b] <- 1/sum(b != 0)\n        }\n        return(x)\n    })\n})\n\n\n\n\nCode\n# run DGE analysis\nres <- lapply(ids, \\(.) {\n    lapply(names(cs[[.]]), \\(c) {\n        ht <- glmQLFTest(fit[[.]], contrast = cs[[.]][[c]])\n        tt <- topTags(ht, n = Inf)$table\n        data.frame(row.names = NULL,\n            gene = rownames(tt), tt,\n            contrast = c, subset = .)\n    }) |> do.call(what = rbind)\n}) |> do.call(what = rbind)\nrownames(res) <- NULL\n\n\n\n\n\n\n\n\n\nCode\nps <- lapply(setdiff(ids, tls), \\(.) {\n    df <- res[res$subset == . & res$contrast == \"TLS\", ]\n    .volcano(df, title = ., fdr = 1e-4, lfc = 1.25)\n})\nwrap_plots(ps, nrow = 1) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\nps <- lapply(tls, \\(.) {\n    df <- res[res$subset == . & grepl(\"TLS\", res$contrast), ]\n    .volcano(df, title = ., fdr = 1e-3, lfc = 0.5)\n})\nwrap_plots(ps, nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\ndf <- res[res$contrast %in% c(\"SFL\", \"Tcell\"), ]\nps <- lapply(unique(df$subset), \\(s) {\n    lapply(unique(df$contrast), \\(c) {\n        df <- res[res$subset == s & res$contrast == c, ]\n        .volcano(df, fdr = 1e-4, lfc = 1.25, title = paste(s, c, sep = \",\"))\n    })\n})\nwrap_plots(Reduce(c, ps), nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\n\nCode\ntop <- res %>%\n    filter(!subset %in% tls) %>%\n    group_by(subset) %>%\n    filter(FDR < 0.1, contrast == \"TLS\") %>% \n    slice_max(abs(logFC), n = 40) %>% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    mtx <- logcounts(sub)[top[[.]]$gene, sub$TumorType == .]\n    cd <- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm <- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop <- res %>%\n    group_by(subset) %>%\n    filter(!grepl(\"TLS\", contrast)) %>%\n    slice_max(abs(logFC), n = 40) %>% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    idx <- sub$TumorType == . & sub$TissueSub %in% c(\n        \"E_TLS\", paste0(unique(top[[.]]$contrast), \"_TLS\"))\n    mtx <- logcounts(sub)[top[[.]]$gene, idx]\n    cd <- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm <- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop <- res %>%\n    filter(!subset %in% tls) %>%\n    group_by(subset) %>%\n    filter(FDR < 0.05, contrast == \"TLS\") %>% \n    slice_max(abs(logFC), n = 25) %>% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    plt <- ggplot(\n        filter(gg, \n            TumorType == .,\n            gene %in% top[[.]]$gene),\n        aes(TissueSub, expr, fill = TissueSub)) +\n        facet_wrap(~ gene, scales = \"free_y\") +\n        geom_boxplot(size = 0.1, fill = NA, outlier.color = NA, show.legend = FALSE) + \n        geom_beeswarm(shape = 21, col = \"black\", stroke = 0.1, size = 1.2, alpha = 0.8) + \n        guides(fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +\n        labs(x = NULL, y = \"Expression (logCPM)\") +\n        scale_fill_brewer(palette = \"Set2\") +\n        theme_linedraw(9) + theme(\n            panel.grid = element_blank(),\n            axis.text.x = element_blank(),\n            axis.ticks.x = element_blank(),\n            strip.background = element_blank(),\n            legend.key.size = unit(0.5, \"lines\"),\n            strip.text = element_text(color = \"black\", face = \"bold\"))\n    print(plt); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ntop <- res %>%\n    filter(subset %in% tls) %>%\n    group_by(subset) %>%\n    #filter(FDR < 0.05, contrast == \"TLS\") %>% \n    slice_max(abs(logFC), n = 25) %>% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    plt <- ggplot(\n        filter(gg, \n            TissueSub == .,\n            gene %in% top[[.]]$gene),\n        aes(TumorType, expr, fill = TumorType)) +\n        facet_wrap(~ gene, scales = \"free_y\") +\n        geom_boxplot(size = 0.1, fill = NA, outlier.color = NA, show.legend = FALSE) + \n        geom_beeswarm(shape = 21, col = \"black\", stroke = 0.1, size = 1.2, alpha = 0.8) + \n        guides(fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +\n        labs(x = NULL, y = \"Expression (logCPM)\") +\n        scale_fill_brewer(palette = \"Set2\") +\n        theme_linedraw(9) + theme(\n            panel.grid = element_blank(),\n            axis.text.x = element_blank(),\n            axis.ticks.x = element_blank(),\n            strip.background = element_blank(),\n            legend.key.size = unit(0.5, \"lines\"),\n            strip.text = element_text(color = \"black\", face = \"bold\"))\n    print(plt); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(res, file.path(\"..\", \"outs\", \"02-dge.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] EnhancedVolcano_1.18.0      ggrepel_0.9.3              \n [3] ggbeeswarm_0.7.2            patchwork_1.1.2            \n [5] pheatmap_1.0.12             scuttle_1.10.1             \n [7] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.1\n [9] Biobase_2.60.0              GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.0         IRanges_2.34.0             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] MatrixGenerics_1.12.0       matrixStats_0.63.0         \n[17] ggplot2_3.4.2               tidyr_1.3.0                \n[19] dplyr_1.1.2                 edgeR_3.42.2               \n[21] limma_3.56.1               \n\nloaded via a namespace (and not attached):\n [1] beeswarm_0.4.0            gtable_0.3.3             \n [3] xfun_0.39                 htmlwidgets_1.6.2        \n [5] lattice_0.21-8            Cairo_1.6-0              \n [7] vctrs_0.6.2               tools_4.3.0              \n [9] bitops_1.0-7              generics_0.1.3           \n[11] parallel_4.3.0            tibble_3.2.1             \n[13] fansi_1.0.4               pkgconfig_2.0.3          \n[15] Matrix_1.5-4.1            RColorBrewer_1.1-3       \n[17] sparseMatrixStats_1.12.0  lifecycle_1.0.3          \n[19] GenomeInfoDbData_1.2.10   farver_2.1.1             \n[21] compiler_4.3.0            munsell_0.5.0            \n[23] codetools_0.2-19          vipor_0.4.5              \n[25] htmltools_0.5.5           RCurl_1.98-1.12          \n[27] yaml_2.3.7                pillar_1.9.0             \n[29] crayon_1.5.2              BiocParallel_1.34.2      \n[31] DelayedArray_0.26.3       tidyselect_1.2.0         \n[33] locfit_1.5-9.7            digest_0.6.31            \n[35] purrr_1.0.1               labeling_0.4.2           \n[37] splines_4.3.0             fastmap_1.1.1            \n[39] grid_4.3.0                colorspace_2.1-0         \n[41] cli_3.6.1                 magrittr_2.0.3           \n[43] S4Arrays_1.0.4            utf8_1.2.3               \n[45] withr_2.5.0               DelayedMatrixStats_1.22.0\n[47] scales_1.2.1              rmarkdown_2.21           \n[49] XVector_0.40.0            beachmat_2.16.0          \n[51] evaluate_0.21             ggrastr_1.0.1            \n[53] knitr_1.42                rlang_1.1.1              \n[55] Rcpp_1.0.10               glue_1.6.2               \n[57] rstudioapi_0.14           jsonlite_1.8.4           \n[59] R6_2.5.1                  zlibbioc_1.46.0"
  },
  {
    "objectID": "vis-01-quality.html",
    "href": "vis-01-quality.html",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(scran)\nlibrary(scater)\nlibrary(Matrix)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(RColorBrewer)\nlibrary(SpatialExperiment)\n\n\n\n\n\n\n\n\n\n\nCode\ndir <- file.path(\"..\", \"data\", \"Visium\")\nids <- list.dirs(dir, recursive = FALSE)\nids <- ids[grep(\"^B[0-9]+\", basename(ids))]\nnames(ids) <- gsub(\"_[0-9]*$\", \"\", basename(ids))\nspe <- read10xVisium(ids, type = \"HDF5\", images = \"lowres\")\n# make barcodes/spot identifiers unique\nspe$barcode <- colnames(spe); colnames(spe) <- \n    paste(spe$sample_id, spe$barcode, sep = \".\")\n# sparsify counts\ny <- as.matrix(assay(spe))\ny <- as(y, \"dgCMatrix\")\nassay(spe) <- y\n\n\n\n\nCode\nmd <- read.csv(file.path(dir, \"metadata\", \"md.csv\"))\nmd <- md[!is.na(md$Used.for.10x), ]\nmd$sample_id <- gsub(\"-\", \"_\", md$B.number)\nidx <- match(spe$sample_id, md$sample_id)\ntable(spe$TumorType <- factor(md$Tumor.type[idx]))\n\n\n\nccRCC  LSCC  LUAD \n 9564 16010  2158 \n\n\n\n\n\n\n\nCode\ncsv1 <- file.path(dir, \"metadata\", \"labels_all.csv\")\ncsv2 <- file.path(dir, \"metadata\", \"labels_tls.csv\")\nlab1 <- read.csv(csv1, row.names = 1)\nlab2 <- read.csv(csv2, row.names = 1)\nlab1$TLS[lab1$TLS == \"\"] <- NA\nlab2$TLS[lab2$TLS == \"\"] <- NA\nspe$anno1 <- factor(NA, unique(lab1$TLS))\nspe$anno2 <- factor(NA, unique(lab2$TLS))\nlab2 <- cbind(lab2, lab1[, c(\"Barcode\", \"Patient_ID\")])\nidx0 <- split(seq(ncol(spe)), spe$sample_id)\nlab1 <- split(lab1, lab1$Patient_ID)\nlab2 <- split(lab2, lab2$Patient_ID)\nfor (. in names(ids)) {\n    bcs1 <- gsub(\"-[0-9]$\", \"-1\", lab1[[.]]$Barcode)\n    bcs2 <- gsub(\"-[0-9]$\", \"-1\", lab2[[.]]$Barcode)\n    bcs0 <- spe$barcode[idx0[[.]]]\n    idx1 <- match(bcs0, bcs1)\n    idx2 <- match(bcs0, bcs2)\n    spe$anno1[idx0[[.]]] <- lab1[[.]]$TLS[idx1]\n    spe$anno2[idx0[[.]]] <- lab2[[.]]$TLS[idx2]\n}\ntable(spe$sample_id, spe$anno1)\n\n\n           \n             NOR  TUM INFL  TLS EXCL   LN\n  B04_17776 1664  585  141  161    0    0\n  B05_32288  574  355  136   80    0    0\n  B05_8527   330 1089   40   43   87    0\n  B06_24137 1137 1042   62  407    0   33\n  B06_24784 1126  718  178  138    0    0\n  B07_30616  266  491    6   32    0    0\n  B07_38596  493  593   27   96  977    0\n  B15_11190  160  364   39   27    0    0\n\n\nCode\ntable(spe$sample_id, spe$anno2)[1:5, 1:6]\n\n\n           \n             NOR  TUM INFL 17776_MTLS3 17776_ETLS11 17776_ETLS12\n  B04_17776 1664  585  140          28           22           27\n  B05_32288  587  355  126           0            0            0\n  B05_8527   330 1089   40           0            0            0\n  B06_24137 1137 1042   62           0            0            0\n  B06_24784 1125  718  173           0            0            0\n\n\n\n\n\n\n\nCode\nrd <- rowData(spe)\nrd$ensembl <- rownames(spe)\nrownames(spe) <- make.names(rd$symbol)\nspatialCoordsNames(spe) <- c(\"x\", \"y\")\nspe$sample_id <- factor(spe$sample_id)\n\n\n\n\nCode\nspe <- logNormCounts(spe, transform = \"none\")\nspe <- logNormCounts(spe, transform = \"log\")\n\n\n\n\n\n\n\n\nCode\n# add gene-(sample-) & spot-level QC summaries \nsub <- split(seq(ncol(spe)), spe$sample_id)\nspe <- addPerFeatureQC(spe, subsets = sub)\nspe <- addPerCellQC(spe)\n# get tables of gene & spot metadata\nrd <- .df(spe, margin = 1)\ncd <- .df(spe, margin = 2)\n\n\n\n\n\n\nCode\ndr <- rd %>% \n    select(matches(\"subsets.*detected\")) %>% \n    pivot_longer(everything()) %>% \n    mutate(sample_id = gsub(\"subsets_(.*)_detected\", \"\\\\1\", name))\nggplot(dr, aes(value, col = sample_id)) &\n    labs(x = \"% of cells with non-zero count\") &\n    geom_density(key_glyph = \"point\") & scale_x_sqrt() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(aspect.ratio = 2/3, \n        panel.grid.minor = element_blank(), \n        legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(total, col = sample_id)) +\nggplot(cd, aes(detected, col = sample_id)) +\nggplot(cd, aes(total, col = anno1)) +\nggplot(cd, aes(detected, col = anno1)) +\n    plot_layout(nrow = 2, guides = \"collect\") &\n    geom_density(key_glyph = \"point\") & scale_x_log10() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\ncd %>% \n  group_by(sample_id) %>% \n  mutate(total = .scale01(log10(total))) %>% \n  ggplot(aes(x, y, col = total)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  scale_color_viridis_c() +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCode\ncd %>% \n  ggplot(aes(x, y, col = anno1)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"bottom\") +\n  guides(col = guide_legend(nrow = 1, \n      override.aes = list(size = 3)))\n\n\n\n\n\n\n\nCode\nns <- as.data.frame(table(sample_id = spe$sample_id, anno1 = spe$anno1))\nggplot(ns, aes(anno1, Freq, fill = anno1)) +\n    facet_wrap(~ sample_id, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid.minor = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\nCode\nggplot(ns, aes(sample_id, Freq, fill = sample_id)) +\n    facet_wrap(~ anno1, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n# drop genes/spots without \n# any detected spots/genes\ny <- counts(spe) > 1\nsub <- spe[\n    rowSums(y) > 1,\n    colSums(y) > 1]\ncbind(\n    raw = dim(spe), \n    fil = dim(sub))\n\n       raw   fil\n[1,] 17878 16643\n[2,] 27732 27595\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(spe, \"../outs/01-spe.rds\")\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.0 (2023-04-21)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Ventura 13.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Europe/Zurich\ntzcode source: internal\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] SpatialExperiment_1.10.0    RColorBrewer_1.1-3         \n [3] patchwork_1.1.2             Matrix_1.6-0               \n [5] scater_1.28.0               ggplot2_3.4.2              \n [7] scran_1.28.2                scuttle_1.10.1             \n [9] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n[11] Biobase_2.60.0              GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.1         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] MatrixGenerics_1.12.2       matrixStats_1.0.0          \n[19] tidyr_1.3.0                 dplyr_1.1.2                \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7              gridExtra_2.3            \n [3] rlang_1.1.1               magrittr_2.0.3           \n [5] compiler_4.3.0            DelayedMatrixStats_1.22.1\n [7] vctrs_0.6.3               pkgconfig_2.0.3          \n [9] crayon_1.5.2              fastmap_1.1.1            \n[11] magick_2.7.4              XVector_0.40.0           \n[13] labeling_0.4.2            utf8_1.2.3               \n[15] rmarkdown_2.23            ggbeeswarm_0.7.2         \n[17] purrr_1.0.1               xfun_0.39                \n[19] bluster_1.10.0            zlibbioc_1.46.0          \n[21] beachmat_2.16.0           jsonlite_1.8.7           \n[23] rhdf5filters_1.12.1       DelayedArray_0.26.6      \n[25] Rhdf5lib_1.22.0           BiocParallel_1.34.2      \n[27] irlba_2.3.5.1             parallel_4.3.0           \n[29] cluster_2.1.4             R6_2.5.1                 \n[31] limma_3.56.2              Rcpp_1.0.11              \n[33] knitr_1.43                R.utils_2.12.2           \n[35] igraph_1.5.0.1            tidyselect_1.2.0         \n[37] rstudioapi_0.15.0         abind_1.4-5              \n[39] yaml_2.3.7                viridis_0.6.4            \n[41] codetools_0.2-19          lattice_0.21-8           \n[43] tibble_3.2.1              withr_2.5.0              \n[45] evaluate_0.21             pillar_1.9.0             \n[47] generics_0.1.3            RCurl_1.98-1.12          \n[49] sparseMatrixStats_1.12.2  munsell_0.5.0            \n[51] scales_1.2.1              glue_1.6.2               \n[53] metapod_1.8.0             tools_4.3.0              \n[55] BiocNeighbors_1.18.0      ScaledMatrix_1.8.1       \n[57] locfit_1.5-9.8            rhdf5_2.44.0             \n[59] grid_4.3.0                DropletUtils_1.20.0      \n[61] edgeR_3.42.4              colorspace_2.1-0         \n[63] GenomeInfoDbData_1.2.10   beeswarm_0.4.0           \n[65] BiocSingular_1.16.0       HDF5Array_1.28.1         \n[67] vipor_0.4.5               cli_3.6.1                \n[69] rsvd_1.0.5                fansi_1.0.4              \n[71] S4Arrays_1.0.5            viridisLite_0.4.2        \n[73] gtable_0.3.3              R.methodsS3_1.8.2        \n[75] digest_0.6.33             ggrepel_0.9.3            \n[77] dqrng_0.3.0               farver_2.1.1             \n[79] rjson_0.2.21              htmlwidgets_1.6.2        \n[81] htmltools_0.5.5           R.oo_1.25.0              \n[83] lifecycle_1.0.3           statmod_1.5.0"
  },
  {
    "objectID": "vis-02-tls.html",
    "href": "vis-02-tls.html",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(scran)\nlibrary(scater)\nlibrary(scuttle)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(patchwork)\n\n\n\n\n\n\n\nCode\nspe <- readRDS(\"../outs/01-spe.rds\")\n\n\n\n\n\n\n\n\n\n\nCode\n# add tissue types\nspe$TissueType <- ifelse(\n    spe$TumorType == \"ccRCC\", \n    yes = \"kid\", no = \"lun\")\n# exclude unassigned & \n# spots tagged for exclusion\nnan <- is.na(spe$anno1) | is.na(spe$anno2)\nrmv <- grepl(\"EXCL\", spe$anno1)\nsub <- spe[, !(nan | rmv)]\n# subset regions of interest\nids <- c(\"INFL\", \"TLS\", \"LN\")\nsub <- sub[, sub$anno1 %in% ids]\nsub$anno1 <- droplevels(sub$anno1)\n# subset samples of interest\nids <- c(\"B04_17776\", \"B06_24137\", \"B06_24784\")\nsub <- sub[, sub$sample_id %in% ids]\nsub$sample_id <- droplevels(sub$sample_id)\n# simplify annotations\nsub$anno3 <- as.character(sub$anno2)\nsub$anno3[grep(\".*ETLS\", sub$anno3)] <- \"E_TLS\"\nsub$anno3[grep(\".*MTLS\", sub$anno3)] <- \"M_TLS\"\nsub$anno3 <- factor(sub$anno3, exclude = NULL)\ntable(sub$sample_id, sub$anno3)\n\n\n           \n            E_TLS INFL  LN M_TLS\n  B04_17776    68  140   0    94\n  B06_24137   237   62  33   167\n  B06_24784    89  173   0    53\n\n\nCode\ntable(sub$anno1, sub$anno3)\n\n\n      \n       E_TLS INFL  LN M_TLS\n  INFL     1  375   0     5\n  TLS    393    0   0   309\n  LN       0    0  33     0\n\n\n\n\n\n\n\nCode\n# keep features detected in at least 20 spots in any sample\n# and spots with at least 200 detected features overall\nidx <- split(seq(ncol(sub)), sub$sample_id)\ngs <- sapply(idx, \\(.) {\n    y <- counts(sub[, .]) > 0\n    rowSums(y) >= 20\n})\nfil <- sub[rowAnys(gs), ]\nfil <- fil[, colSums(counts(fil) > 0) >= 200]\ncbind(spe = dim(spe), sub = dim(sub), fil = dim(fil))\n\n\n       spe   sub  fil\n[1,] 17878 17878 8814\n[2,] 27732  1116 1065\n\n\n\n\n\n\n\n\nCode\n# split by sample\nidx <- split(seq(ncol(sub)), sub$sample_id)\nlys <- lapply(idx, \\(.) sub[, .])\n# feature selection & PCA\nlys <- lapply(lys, \\(.) {\n  tbl <- modelGeneVar(.) \n  hvg <- rowData(.)$hvg <- tbl$bio > 0\n  runPCA(., subset_row = hvg) \n})\n# within TLS only\ntls <- lapply(lys, \\(.) {\n  . <- .[, .$anno1 == \"TLS\"]\n  .$anno3 <- droplevels(.$anno3)\n  tbl <- modelGeneVar(.) \n  hvg <- rowData(.)$hvg <- tbl$bio > 0\n  runPCA(., subset_row = hvg) \n})\n\n\n\n\nCode\nthm <- list(\n  coord_equal(),\n  theme(legend.key.size = unit(0.5, \"lines\")),\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 2))))\npal <- hcl.colors(nlevels(sub$anno3), \"Set 2\")\n\nlapply(lys, plotPCA, color_by = \"anno3\") |>\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = pal, drop = FALSE)\n\n\n\n\n\nCode\nlapply(tls, plotPCA, color_by = \"anno3\") |>\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = c(\"red\", \"blue\"))\n\n\n\n\n\n\n\nCode\nvar <- sapply(tls, \\(.) {\n  var <- modelGeneVar(.)$bio\n  setNames(var, rownames(.))\n})\n# top variables across all sample\no <- order(rowMeans(var), decreasing = TRUE)\n(sel <- rownames(var)[head(o, 12)])\n\n\n [1] \"IGHG1\"   \"IGKV4.1\" \"IGHG2\"   \"IGLC1\"   \"IGLV3.1\" \"IGHG3\"   \"IGHA1\"  \n [8] \"CLU\"     \"IGHG4\"   \"IGHJ6\"   \"XBP1\"    \"H4C4\"   \n\n\n\n\nCode\nlapply(tls, \\(sce) {\n  lapply(sel, \\(g) plotPCA(sce, color_by = g)) |>\n    wrap_plots() + plot_layout(nrow = 3) & coord_equal()\n}) \n\n\n$B04_17776\n\n\n\n\n\n\n$B06_24137\n\n\n\n\n\n\n$B06_24784\n\n\n\n\n\n\n\nCode\n# top variables by sample\nsel <- apply(var, 2, \\(.) {\n  o <- order(., decreasing = TRUE)\n  names(.)[head(o, 20)]\n}, simplify = FALSE)\nlapply(names(tls), \\(.) {\n  x <- tls[[.]][sel[[.]], ]\n  cd <- data.frame(colData(x))\n  cd <- cd[c(\"total\", \"anno3\")]\n  hm <- pheatmap(\n    main = .,\n    logcounts(x),\n    scale = \"none\",\n    annotation_col = cd,\n    show_colnames = FALSE)\n  print(hm)\n})\n\n\n\n\n\n\n\n\n\n\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL"
  }
]