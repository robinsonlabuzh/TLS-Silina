[
  {
    "objectID": "vis-03-de.html",
    "href": "vis-03-de.html",
    "title": "Differential",
    "section": "",
    "text": "Code\noptions(ggrepel.max.overlaps = Inf)\n\n.volcano &lt;- function(data, name1, name2, fdr=0.1, lfc=2, one_sided=FALSE,\n                     fdr_label=fdr, lfc_label=lfc){\n  \n  data$expression = ifelse(data$FDR &lt; fdr_label & data$logFC &gt;= lfc_label, 'Up',\n                     ifelse(data$FDR &lt; fdr_label & data$logFC &lt;= -lfc_label ,'Down', 'Stable')\n                     )\n  data$gene &lt;- rownames(data)\n  if (one_sided){\n    DEGs &lt;- subset(data, expression ==\"Up\")\n    xaxis &lt;- c(0,NA)\n    yaxis &lt;- c(0, \n               max(data[[\"FDR\"]], na.rm = TRUE) + 1.5)\n  }else{\n    DEGs &lt;- subset(data, expression %in% c(\"Up\", \"Down\"))\n    xaxis &lt;- c(min(data[[\"logFC\"]], na.rm = TRUE) - 1.5, \n               max(data[[\"logFC\"]], na.rm = TRUE) + 1.5)\n    yaxis &lt;- c(0,NA)\n  }\n  significant &lt;- rownames(DEGs)\n  keyvals.colour &lt;- ifelse(data$logFC &lt; -lfc & data$FDR &lt; fdr, \"#662965\",\n                    ifelse(data$logFC &gt; lfc & data$FDR &lt; fdr,\"gold1\",\n                      ifelse(data$FDR &gt;= fdr,\"#8F8F8F\",\"steelblue4\"\n                      )))\n  names(keyvals.colour)[keyvals.colour == \"#662965\"] &lt;- paste0('Up in ', name1)\n  names(keyvals.colour)[keyvals.colour == \"gold1\"] &lt;- paste0('Up in ', name2)\n  names(keyvals.colour)[keyvals.colour == \"steelblue4\"] &lt;- 'Low FC'\n  names(keyvals.colour)[keyvals.colour == '#8F8F8F'] &lt;- 'NS'\n  \n  EnhancedVolcano(data,\n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = NULL, subtitle = NULL,\n    lab = data[[\"gene\"]], labSize = 2,\n    selectLab = rownames(DEGs),\n    xlim = xaxis,\n    ylim = yaxis,\n    xlab = bquote(~Log[2]~ 'FC'),\n    ylab = bquote(\"-\"~Log[10]~ 'adj. p-val'),\n    colCustom = keyvals.colour,\n    maxoverlapsConnectors = Inf,\n    drawConnectors = TRUE, widthConnectors = 0.25) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) +\n    theme(#aspect.ratio = 1,\n          legend.title = element_blank(),\n          legend.position = \"top\",\n          panel.grid.minor = element_blank())\n}\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(edgeR)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(UpSetR)\nlibrary(EnhancedVolcano)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(SingleCellExperiment)\nlibrary(ExploreModelMatrix)\nlibrary(scater)\nlibrary(ggrepel)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")\n\n# filter spots with at least 200 detected features overall\nspe &lt;- spe[, colSums(counts(spe) &gt; 0) &gt;= 200]\n\n# filter pat that is not part of the GEOMX data\nspe &lt;- spe[,!spe$sample_id %in% \"B07_38596\"]\nspe$sample_id &lt;- as.character(spe$sample_id)\nspe$sample_id[spe$sample_id %in% \"B06_24137\"] &lt;- \"B06_24136\"\nspe$sample_id &lt;- as.factor(spe$sample_id)\n\nspe$anno2 &lt;- as.character(spe$anno2)\nspe$anno2 &lt;- gsub(\"24137\", \"24136\", spe$anno2)\nspe$anno2 &lt;- as.factor(spe$anno2)\n\nnan &lt;- is.na(spe$anno2)\nspe &lt;- spe[, !nan]\nspe$anno2 &lt;- spe$anno2 |&gt; forcats::fct_collapse(\n  \"parenchymal\" = c(\"NOR\", \"TUM\"))\nspe$anno3 &lt;- spe$anno2\nspe$anno3 &lt;- as.character(spe$anno3)\nspe$anno3[grep(\".*MTLS\", spe$anno3)] &lt;- \"MTLS\"\nspe$anno3[grep(\".*ETLS\", spe$anno3)] &lt;- \"ETLS\"\n\n# Filter spots by type\nspe &lt;- spe[,!spe$TumorType %in% \"LUAD\"]\nspe &lt;- spe[,!spe$anno1 %in% c(\"EXCL\", \"LN\", \"INFL\")]\n\n#Remove non matching anno\nspe &lt;- spe[,!spe$anno2 %in% c(\"INFL\", \"24784_ETLS57\", \"EXCL\")]\n\nspe$anno3 &lt;- as.factor(spe$anno3)\nspe$anno3 &lt;- droplevels(spe$anno3)\nspe$anno2 &lt;- droplevels(spe$anno2)\nspe$anno1 &lt;- droplevels(spe$anno1)\nspe$TumorType &lt;- droplevels(spe$TumorType)\nspe$anno3 &lt;- relevel(spe$anno3, ref= \"parenchymal\")\n\n\n\nspe$anno4 &lt;- as.character(spe$anno2)\n\nspe$anno4[grep(\"parenchymal\", spe$anno4)] &lt;- paste0(spe$sample_id[grep(\"parenchymal\", spe$anno4)], \"_parenchymal\")\n\nspe$PatTum &lt;- paste0(spe$sample_id, \"_\", spe$TumorType)\nspe$PatTum &lt;- spe$PatTum |&gt; forcats::fct_collapse(\n  \"1\" = c(\"B04_17776_LSCC\", \"B05_8527_ccRCC\"),\n  \"2\" = c(\"B05_32288_LSCC\", \"B06_24784_ccRCC\"),\n  \"3\" = c(\"B06_24136_LSCC\", \"B07_30616_ccRCC\"))\n\n# keep features detected in at least 20 spots in any sample\nidx &lt;- split(seq(ncol(spe)), spe$sample_id)\ngs &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(spe[, .]) &gt; 3\n    rowSums(y) &gt;= 20\n})\nspe &lt;- spe[rowAnys(gs), ]\n\n# genes expressed in TLS after filtering\nidx &lt;- split(seq(ncol(spe)), spe$anno3)\ngs_type &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(spe[, .]) &gt; 3\n    rowSums(y) &gt;= 1\n})\n\ncolSums(gs_type)\n\n\nparenchymal        ETLS        MTLS \n       1617        1084         955 \n\n\n\n\n\nModel1: DE associated with maturation\n\n\nCode\n# Generate pseudo bulk object\npbs &lt;- aggregateAcrossCells(spe, ids=spe$anno4)\n\ndesign1 &lt;- model.matrix(~ TumorType + TumorType:PatTum + TumorType:anno3, colData(pbs))\n#design1 &lt;- design1[,!colnames(design1) %in% \"TumorTypeccRCC:PatTum4\"]\n\n#Fit model\ndgl1 &lt;- DGEList(counts(pbs))\nkeep &lt;- filterByExpr(dgl1, design1)\n#dgl1 &lt;- dgl1[keep, , keep.lib.sizes=FALSE]\ndgl1 &lt;- calcNormFactors(dgl1)\ndgl1 &lt;- estimateDisp(dgl1, design1, robust=TRUE)\nfit1 &lt;- glmQLFit(dgl1, design1, robust=TRUE)\n\n\n\n\nCode\ncolnames(design1) &lt;- gsub(\":\", \"_\", colnames(design1))\n\n# Define different contrasts\ncontrast_mod1 &lt;- makeContrasts(\n  ETLS_vs_par_inLSCC = TumorTypeLSCC_anno3ETLS,\n  ETLS_vs_par_inRCC = TumorTypeccRCC_anno3ETLS,\n  SFL_TLS_vs_par_inLSCC = TumorTypeLSCC_anno3MTLS,\n  SFL_TLS_vs_par_inRCC = TumorTypeccRCC_anno3MTLS,\n  ETLS_vs_SFTLS_inLSCC = TumorTypeLSCC_anno3ETLS - TumorTypeLSCC_anno3MTLS,\n  ETLS_vs_SFTLS_inRCC = TumorTypeccRCC_anno3ETLS - TumorTypeccRCC_anno3MTLS,\n  levels=design1)\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndesign2 &lt;- model.matrix(~ 0 + TumorType:anno3, colData(pbs))\n\n\n# fit deseq2 GLM model\ndgl2 &lt;- DGEList(counts(pbs))\nkeep &lt;- filterByExpr(dgl2, design2)\n#dgl2 &lt;- dgl2[keep, , keep.lib.sizes=FALSE]\ndgl2 &lt;- calcNormFactors(dgl2)\ndgl2 &lt;- estimateDisp(dgl2, design2, robust=TRUE)\nfit2 &lt;- glmQLFit(dgl2, design2, robust=TRUE)\n\n\n\n\nCode\ncolnames(design2) &lt;- gsub(\":\", \"_\", colnames(design2))\n\n# Define different contrasts\ncontrast_mod2 &lt;- makeContrasts(\n  ETLS_inRCC_vs_LSCC = TumorTypeccRCC_anno3ETLS - TumorTypeLSCC_anno3ETLS,\n  SFL_TLS_inRCC_vs_LSCC = TumorTypeccRCC_anno3MTLS - TumorTypeLSCC_anno3MTLS,\n  par_inRCC_vs_LSCC = TumorTypeccRCC_anno3parenchymal -TumorTypeLSCC_anno3parenchymal,\n  allTLS_inRCC_vs_LSCC = (TumorTypeccRCC_anno3ETLS + TumorTypeccRCC_anno3MTLS)/2 - (TumorTypeLSCC_anno3ETLS + TumorTypeLSCC_anno3MTLS)/2,\n  levels=design2)\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nres_mod2 &lt;- lapply(res_mod2, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\nlog_FC_tab &lt;- res_mod2 |&gt; bind_rows(.id = \"contrast\")\n\n# Function for signficance thresholds\ncase_sig &lt;- function(FDR1, FDR2, com1, com2, FDR_t){\n  case_when(\n  FDR1 &lt;= FDR_t & !! FDR2 &lt;= FDR_t ~ \"both\",\n  FDR1 &lt;= FDR_t & !! FDR2 &gt; FDR_t ~ com1,\n  FDR1 &gt; FDR_t & !! FDR2 &lt;= FDR_t ~ com2,\n  FDR1 &gt; FDR_t & !! FDR2 &gt; FDR_t ~ \"none\"\n)\n}\n\n## plotting function\nlogFC_plot &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1,\n                       logFC_both = 0.5){\n  # subset dataframe\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR))\n  \n  # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  # Add to res list\n  res_nam &lt;- paste0(comp1, \"_\", comp2)\n  \n  # Add genes to highlight\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    highlight = case_when(\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        abs(!!sym(logFC_comp1)) &gt; logFC_both ~ gene,\n      .default = \"\"\n      )\n    ) \n  # plot limits\n  max_lim1 &lt;- max(abs(min(log_FC_sub[,logFC_comp1])), \n                  max(log_FC_sub[,logFC_comp1]))\n  max_lim2 &lt;- max(abs(min(log_FC_sub[,logFC_comp2])), \n                  max(log_FC_sub[,logFC_comp2]))\n  \n  # colors\n  color_pal &lt;- c(\"grey\",\"#fdb462\", \"#ff6666\",\"#0099cc\")\n  names(color_pal) &lt;- c(\"none\", \"both\", comp1, comp2)\n  \n  # plot\n  p &lt;- ggplot(log_FC_sub, aes_string(x=logFC_comp1, \n                       y=logFC_comp2)) + \n    geom_point(aes(colour = sig), size = 0.9, alpha = 0.7) +\n    xlim(-max_lim1, max_lim1) +\n    ylim(-max_lim2, max_lim2) +\n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) + \n    scale_color_manual(values = color_pal) + \n    theme_bw()\n  \n  # annotations\n  p + geom_text_repel(\n    aes(label = highlight),\n    family = \"Poppins\",\n    size = 2,\n    min.segment.length = 0, \n    seed = 42, \n    box.padding = 0.5,\n    max.overlaps = Inf,\n    arrow = arrow(length = unit(0.005, \"npc\")),\n    nudge_x = .15,\n    nudge_y = .5,\n    color = \"#3D3D3D\"\n  )\n}\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo select TLS-specific DE genes specific to each tumor type we use results from model2. Results are then filtered for genes that are also significant in the parenchymal comparison of the tumor (excluded), if the genes were not shown to be specific to TLS maturation by showing significant differences in model1 comparisons (both_TLS). Genes only significant in the non parenchymal comparison of model2 (sig_TLS) and those significant in the TLS-spcific and parenchymal comparison of the tumor showing an opposite effect (opposite) were selected.\n\n\nCode\nsel_TLS &lt;- function(res, pat, fdr){\n  pat_nam &lt;- grep(pat, names(res), value = T)\n  pat_nam &lt;- grep(\"par\", pat_nam, value = T)\n  sub_res &lt;- lapply(pat_nam, function(nam){\n    res_sel &lt;- res[[nam]] |&gt; filter(logFC &gt; 0 & FDR &lt; fdr)\n    res_sel$gene &lt;- rownames(res_sel)\n    data.frame(res_sel)\n  }) |&gt; bind_rows(.id = \"comp\")\n}\n\nTLS_RCC &lt;- sel_TLS(res_mod1, \"RCC\", fdr = 0.05)\nTLS_RCC_gene &lt;- unique(TLS_RCC$gene)\nwrite.csv(TLS_RCC_gene, paste0(\"../outs/TLS_RCC_genes_vis.csv\"))\n\nTLS_LSCC &lt;- sel_TLS(res_mod1, \"LSCC\", fdr = 0.05)\nTLS_LSCC_gene &lt;- unique(TLS_LSCC$gene)\nwrite.csv(TLS_LSCC_gene, paste0(\"../outs/TLS_LSCC_genes_vis.csv\"))\n\n# General exclusion list\n# Genes sig DE in parenchymal comparison, but not sig in tumor-specific TLS maturation\npar_res &lt;- res_mod2[[\"par_inRCC_vs_LSCC\"]] |&gt; \n  filter(FDR &lt; 0.05) |&gt; \n  data.frame()\npar_res$gene &lt;- rownames(par_res)\n\nexclude &lt;- par_res[!par_res$gene %in% c(TLS_RCC_gene, TLS_LSCC_gene),]\nwrite.csv(exclude, paste0(\"../outs/excluded_parenchymal_genes_vis.csv\"))\n\nsel_genes &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1){\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, F,contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR, F))\n  \n   # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  \n   # Genes to exclude\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    selected = case_when(\n      # exclude all sig in both & same sign & not in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        !gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"exclude\",\n      # include sig in both & same sign & in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"both_TLS\",\n      # sig all sig in TLS only\n      sig %in% comp1 ~ \"sig_TLS\",\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) != sign(!!sym(logFC_comp2)) ~ \"opposite\",\n      .default = \"none\"\n      )\n    )\n  par_nam &lt;- grep(\"_par_\", colnames(log_FC_sub))\n  log_FC_sub &lt;- log_FC_sub |&gt; select(-par_nam)\n  }\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# DE objects\nfilenames &lt;- list.files(\"../outs/DE\", pattern=\"*.csv\", full.names=TRUE)\nfilenam &lt;- list.files(\"../outs/DE\", pattern=\"*.csv\", full.names=FALSE)\nfilenam &lt;- gsub(\".csv$\", \"\", filenam)\nde_list &lt;- lapply(filenames, read.csv)\nnames(de_list) &lt;- filenam\n\n\n# subset res to de-genes\nde_gen_list &lt;- lapply(de_list, function(.){\n  if(! \"gene\" %in% colnames(.)){\n      .$gene &lt;- .$X\n  }\n  .\n}) \n\nmod1_names &lt;- grep(\"model1_\", names(de_gen_list), value = T)\nmod2_names &lt;- grep(\"model2_\", names(de_gen_list), value = T)\n\n\ngeo_mod1 &lt;- de_gen_list[mod1_names]\ngeo_mod2 &lt;- de_gen_list[mod2_names]\n\nnames(geo_mod1) &lt;- gsub(\"model1_\", \"\", names(geo_mod1))\nnames(geo_mod2) &lt;- gsub(\"model2_\", \"\", names(geo_mod2))\n\n\n\n\n\n\n\nCode\nres_mod2 &lt;- lapply(res_mod2, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\nres_mod1 &lt;- lapply(res_mod1, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\ncase_sig &lt;- function(FDR1, FDR2, com1, com2, FDR_t){\n  case_when(\n  FDR1 &lt;= FDR_t & !! FDR2 &lt;= FDR_t ~ \"both\",\n  FDR1 &lt;= FDR_t & !! FDR2 &gt; FDR_t ~ com1,\n  FDR1 &gt; FDR_t & !! FDR2 &lt;= FDR_t ~ com2,\n  FDR1 &gt; FDR_t & !! FDR2 &gt; FDR_t ~ \"none\"\n)\n}\n\n\n## plotting function\nlogFC_plot &lt;- function(log_FC_tab,\n                       comp1, \n                       comp2, \n                       FDR_t = 0.1,\n                       logFC_both = 0.5){\n  # subset dataframe\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    select(c(logFC,FDR,gene, tech)) |&gt; \n    pivot_wider(names_from = tech, \n                values_from = c(logFC, FDR))\n  \n  # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  # Add genes to highlight\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    highlight = case_when(\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) ~ gene,\n      .default = \"\"\n      )\n    ) \n  \n  # colors\n  color_pal &lt;- c(\"grey\",\"#fdb462\", \"#ff6666\",\"#0099cc\")\n  names(color_pal) &lt;- c(\"none\", \"both\", comp1, comp2)\n  \n  # plot\n  p &lt;- ggplot(log_FC_sub, aes_string(x=logFC_comp1, \n                       y=logFC_comp2)) + \n    geom_point(aes(colour = sig), size = 0.9, alpha = 0.7) +\n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) + \n    #xlim(0, 1) +\n    #ylim(0, 1) +\n    scale_color_manual(values = color_pal) + \n    theme_bw()\n  \n  # annotations\n  #p + geom_text_repel(\n  #  aes(label = highlight),\n  #  family = \"Poppins\",\n  #  size = 2,\n  #  min.segment.length = 0, \n  #  seed = 42, \n  #  box.padding = 0.5,\n  #  max.overlaps = Inf,\n  #  arrow = arrow(length = unit(0.005, \"npc\")),\n  #  nudge_x = .15,\n  #  nudge_y = .5,\n  #  color = \"#3D3D3D\"\n  #)\n  p\n}\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\",\"outs\", \"01-sce.rds\"))\n\nsce &lt;- sce[,!sce$TissueSub %in% \"LN\"]\nsce$Origin &lt;- sce$TissueSub |&gt; forcats::fct_collapse(\n  \"parenchymal\" = c(\"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\nsce$Origin &lt;- sce$Origin |&gt; droplevels()\nsce$Origin &lt;- relevel(sce$Origin, ref=\"parenchymal\")\n\n\nsce$anno5 &lt;- paste0(sce$PatientID, \"_\", sce$Origin)\npb_geo &lt;- aggregateAcrossCells(sce, ids=sce$anno5, use.assay.type=\"logcounts\",\n                               statistics = \"mean\")\npb_geo$PatientID &lt;- gsub(\"^r\", \"\", pb_geo$PatientID)\npb_geo$anno3 &lt;- pb_geo$Origin\nlevels(pb_geo$anno3) &lt;- list(parenchymal  = \"parenchymal\", \n                              ETLS = \"E_TLS\",\n                              MTLS = \"SFL_TLS\",\n                              EXCL = \"PFL_TLS\",\n                              EXCL = \"Tcell_TLS\")\n\nspe$PatientID &lt;- gsub(\".*_\", \"\", spe$sample_id)\nspe$anno5 &lt;- paste0(spe$PatientID, \"_\", spe$anno3)\npb_vis &lt;- aggregateAcrossCells(spe, ids=spe$anno5, use.assay.type=\"logcounts\",\n                               statistics = \"mean\")\n#pb_vis &lt;-pb_vis[keep,]\n\noverlap_gene &lt;- intersect(rownames(pb_vis), rownames(pb_geo))\noverlap_pat &lt;- intersect(pb_geo$PatientID, pb_vis$PatientID)\n\n\n\n17776_ETLS17776_MTLS17776_parenchymal24136_ETLS24136_MTLS24136_parenchymal32288_ETLS32288_MTLS32288_parenchymal24784_ETLS24784_MTLS24784_parenchymal30616_ETLS30616_MTLS30616_parenchymal8527_ETLS8527_MTLS8527_parenchymal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\nCode\ngeo_exclude &lt;- read.csv(\"../outs/excluded_parenchymal_genes.csv\")\ngeo_TLS_RCC &lt;- read.csv(\"../outs/TLS_RCC_genes.csv\")\ngeo_TLS_LSCC &lt;- read.csv(\"../outs/TLS_LSCC_genes.csv\")\n\ngene_geo &lt;- rownames(sce)\ngene_vis &lt;- rownames(spe)\n\ngene_types &lt;- data.frame(\"gene\" = unique(c(gene_geo, gene_vis)))\ngene_types &lt;- gene_types |&gt; mutate(\"gene_type\" = case_when(\n          gene %in% exclude$gene | gene %in% geo_exclude$gene ~ \"parenchymal\",\n          gene %in% TLS_LSCC_gene & !gene %in% geo_exclude$gene | \n            gene %in% geo_TLS_LSCC$x & !gene %in% exclude$gene ~ \"TLS_LSCC\",\n          gene %in% TLS_RCC_gene & !gene %in% geo_exclude$gene | \n            gene %in% geo_TLS_RCC$x & !gene %in% exclude$gene ~ \"TLS_RCC\",\n          .default = NA\n        ))\ngene_types &lt;- gene_types |&gt; mutate(\"expr\" = case_when(\n          gene %in% rownames(sce) & gene %in% rownames(spe) ~ \"both\",\n          gene %in% rownames(sce) & !gene %in% rownames(spe) ~ \"geo\",\n          !gene %in% rownames(sce) & gene %in% rownames(spe) ~ \"vis\",\n          .default = \"None\")\n        )\n\ntechs &lt;- levels(as.factor(gene_types$expr))\ngene_sum &lt;- lapply(techs, function(type){\n  gene_list &lt;- gene_types$gene[gene_types$expr %in% type]\n  gene_tab &lt;- data.frame(\"gene\" = gene_list, \n                         \"vis\" = rep(NA, length(gene_list)),\n                         \"geo\" = rep(NA, length(gene_list)))\n  gene_tab$vis[gene_tab$gene %in% rownames(spe)] &lt;- \n    rowMeans(logcounts(spe)[gene_tab$gene[gene_tab$gene %in% rownames(spe)],]) \n  gene_tab$geo[gene_tab$gene %in% rownames(sce)] &lt;- \n    rowMeans(logcounts(sce)[gene_tab$gene[gene_tab$gene %in% rownames(sce)],])\n  gene_tab\n})\n\nnames(gene_sum) &lt;- techs\n\ngene_types &lt;- gene_types |&gt; group_by(expr, gene_type) |&gt; summarise(n=n())\nggplot(gene_types, aes(fill=expr, y=n, x=gene_type)) + \n              geom_bar(position=\"stack\", stat=\"identity\") +\n          theme_bw() +\n  scale_fill_brewer(na.value = \"grey\", palette = \"Set2\") \n\n\n\n\n\n\n\n\nbothgeovis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n17776_ETLS17776_MTLS17776_parenchymal24136_ETLS24136_MTLS24136_parenchymal32288_ETLS32288_MTLS32288_parenchymal24784_ETLS24784_MTLS24784_parenchymal30616_ETLS30616_MTLS30616_parenchymal8527_ETLS8527_MTLS8527_parenchymal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n[1] “Sample not complete”"
  },
  {
    "objectID": "vis-03-de.html#tls-de-analysis",
    "href": "vis-03-de.html#tls-de-analysis",
    "title": "Differential",
    "section": "",
    "text": "Code\noptions(ggrepel.max.overlaps = Inf)\n\n.volcano &lt;- function(data, name1, name2, fdr=0.1, lfc=2, one_sided=FALSE,\n                     fdr_label=fdr, lfc_label=lfc){\n  \n  data$expression = ifelse(data$FDR &lt; fdr_label & data$logFC &gt;= lfc_label, 'Up',\n                     ifelse(data$FDR &lt; fdr_label & data$logFC &lt;= -lfc_label ,'Down', 'Stable')\n                     )\n  data$gene &lt;- rownames(data)\n  if (one_sided){\n    DEGs &lt;- subset(data, expression ==\"Up\")\n    xaxis &lt;- c(0,NA)\n    yaxis &lt;- c(0, \n               max(data[[\"FDR\"]], na.rm = TRUE) + 1.5)\n  }else{\n    DEGs &lt;- subset(data, expression %in% c(\"Up\", \"Down\"))\n    xaxis &lt;- c(min(data[[\"logFC\"]], na.rm = TRUE) - 1.5, \n               max(data[[\"logFC\"]], na.rm = TRUE) + 1.5)\n    yaxis &lt;- c(0,NA)\n  }\n  significant &lt;- rownames(DEGs)\n  keyvals.colour &lt;- ifelse(data$logFC &lt; -lfc & data$FDR &lt; fdr, \"#662965\",\n                    ifelse(data$logFC &gt; lfc & data$FDR &lt; fdr,\"gold1\",\n                      ifelse(data$FDR &gt;= fdr,\"#8F8F8F\",\"steelblue4\"\n                      )))\n  names(keyvals.colour)[keyvals.colour == \"#662965\"] &lt;- paste0('Up in ', name1)\n  names(keyvals.colour)[keyvals.colour == \"gold1\"] &lt;- paste0('Up in ', name2)\n  names(keyvals.colour)[keyvals.colour == \"steelblue4\"] &lt;- 'Low FC'\n  names(keyvals.colour)[keyvals.colour == '#8F8F8F'] &lt;- 'NS'\n  \n  EnhancedVolcano(data,\n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = NULL, subtitle = NULL,\n    lab = data[[\"gene\"]], labSize = 2,\n    selectLab = rownames(DEGs),\n    xlim = xaxis,\n    ylim = yaxis,\n    xlab = bquote(~Log[2]~ 'FC'),\n    ylab = bquote(\"-\"~Log[10]~ 'adj. p-val'),\n    colCustom = keyvals.colour,\n    maxoverlapsConnectors = Inf,\n    drawConnectors = TRUE, widthConnectors = 0.25) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) +\n    theme(#aspect.ratio = 1,\n          legend.title = element_blank(),\n          legend.position = \"top\",\n          panel.grid.minor = element_blank())\n}\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(edgeR)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(UpSetR)\nlibrary(EnhancedVolcano)\nlibrary(patchwork)\nlibrary(cowplot)\nlibrary(SingleCellExperiment)\nlibrary(ExploreModelMatrix)\nlibrary(scater)\nlibrary(ggrepel)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")\n\n# filter spots with at least 200 detected features overall\nspe &lt;- spe[, colSums(counts(spe) &gt; 0) &gt;= 200]\n\n# filter pat that is not part of the GEOMX data\nspe &lt;- spe[,!spe$sample_id %in% \"B07_38596\"]\nspe$sample_id &lt;- as.character(spe$sample_id)\nspe$sample_id[spe$sample_id %in% \"B06_24137\"] &lt;- \"B06_24136\"\nspe$sample_id &lt;- as.factor(spe$sample_id)\n\nspe$anno2 &lt;- as.character(spe$anno2)\nspe$anno2 &lt;- gsub(\"24137\", \"24136\", spe$anno2)\nspe$anno2 &lt;- as.factor(spe$anno2)\n\nnan &lt;- is.na(spe$anno2)\nspe &lt;- spe[, !nan]\nspe$anno2 &lt;- spe$anno2 |&gt; forcats::fct_collapse(\n  \"parenchymal\" = c(\"NOR\", \"TUM\"))\nspe$anno3 &lt;- spe$anno2\nspe$anno3 &lt;- as.character(spe$anno3)\nspe$anno3[grep(\".*MTLS\", spe$anno3)] &lt;- \"MTLS\"\nspe$anno3[grep(\".*ETLS\", spe$anno3)] &lt;- \"ETLS\"\n\n# Filter spots by type\nspe &lt;- spe[,!spe$TumorType %in% \"LUAD\"]\nspe &lt;- spe[,!spe$anno1 %in% c(\"EXCL\", \"LN\", \"INFL\")]\n\n#Remove non matching anno\nspe &lt;- spe[,!spe$anno2 %in% c(\"INFL\", \"24784_ETLS57\", \"EXCL\")]\n\nspe$anno3 &lt;- as.factor(spe$anno3)\nspe$anno3 &lt;- droplevels(spe$anno3)\nspe$anno2 &lt;- droplevels(spe$anno2)\nspe$anno1 &lt;- droplevels(spe$anno1)\nspe$TumorType &lt;- droplevels(spe$TumorType)\nspe$anno3 &lt;- relevel(spe$anno3, ref= \"parenchymal\")\n\n\n\nspe$anno4 &lt;- as.character(spe$anno2)\n\nspe$anno4[grep(\"parenchymal\", spe$anno4)] &lt;- paste0(spe$sample_id[grep(\"parenchymal\", spe$anno4)], \"_parenchymal\")\n\nspe$PatTum &lt;- paste0(spe$sample_id, \"_\", spe$TumorType)\nspe$PatTum &lt;- spe$PatTum |&gt; forcats::fct_collapse(\n  \"1\" = c(\"B04_17776_LSCC\", \"B05_8527_ccRCC\"),\n  \"2\" = c(\"B05_32288_LSCC\", \"B06_24784_ccRCC\"),\n  \"3\" = c(\"B06_24136_LSCC\", \"B07_30616_ccRCC\"))\n\n# keep features detected in at least 20 spots in any sample\nidx &lt;- split(seq(ncol(spe)), spe$sample_id)\ngs &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(spe[, .]) &gt; 3\n    rowSums(y) &gt;= 20\n})\nspe &lt;- spe[rowAnys(gs), ]\n\n# genes expressed in TLS after filtering\nidx &lt;- split(seq(ncol(spe)), spe$anno3)\ngs_type &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(spe[, .]) &gt; 3\n    rowSums(y) &gt;= 1\n})\n\ncolSums(gs_type)\n\n\nparenchymal        ETLS        MTLS \n       1617        1084         955 \n\n\n\n\n\nModel1: DE associated with maturation\n\n\nCode\n# Generate pseudo bulk object\npbs &lt;- aggregateAcrossCells(spe, ids=spe$anno4)\n\ndesign1 &lt;- model.matrix(~ TumorType + TumorType:PatTum + TumorType:anno3, colData(pbs))\n#design1 &lt;- design1[,!colnames(design1) %in% \"TumorTypeccRCC:PatTum4\"]\n\n#Fit model\ndgl1 &lt;- DGEList(counts(pbs))\nkeep &lt;- filterByExpr(dgl1, design1)\n#dgl1 &lt;- dgl1[keep, , keep.lib.sizes=FALSE]\ndgl1 &lt;- calcNormFactors(dgl1)\ndgl1 &lt;- estimateDisp(dgl1, design1, robust=TRUE)\nfit1 &lt;- glmQLFit(dgl1, design1, robust=TRUE)\n\n\n\n\nCode\ncolnames(design1) &lt;- gsub(\":\", \"_\", colnames(design1))\n\n# Define different contrasts\ncontrast_mod1 &lt;- makeContrasts(\n  ETLS_vs_par_inLSCC = TumorTypeLSCC_anno3ETLS,\n  ETLS_vs_par_inRCC = TumorTypeccRCC_anno3ETLS,\n  SFL_TLS_vs_par_inLSCC = TumorTypeLSCC_anno3MTLS,\n  SFL_TLS_vs_par_inRCC = TumorTypeccRCC_anno3MTLS,\n  ETLS_vs_SFTLS_inLSCC = TumorTypeLSCC_anno3ETLS - TumorTypeLSCC_anno3MTLS,\n  ETLS_vs_SFTLS_inRCC = TumorTypeccRCC_anno3ETLS - TumorTypeccRCC_anno3MTLS,\n  levels=design1)\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndesign2 &lt;- model.matrix(~ 0 + TumorType:anno3, colData(pbs))\n\n\n# fit deseq2 GLM model\ndgl2 &lt;- DGEList(counts(pbs))\nkeep &lt;- filterByExpr(dgl2, design2)\n#dgl2 &lt;- dgl2[keep, , keep.lib.sizes=FALSE]\ndgl2 &lt;- calcNormFactors(dgl2)\ndgl2 &lt;- estimateDisp(dgl2, design2, robust=TRUE)\nfit2 &lt;- glmQLFit(dgl2, design2, robust=TRUE)\n\n\n\n\nCode\ncolnames(design2) &lt;- gsub(\":\", \"_\", colnames(design2))\n\n# Define different contrasts\ncontrast_mod2 &lt;- makeContrasts(\n  ETLS_inRCC_vs_LSCC = TumorTypeccRCC_anno3ETLS - TumorTypeLSCC_anno3ETLS,\n  SFL_TLS_inRCC_vs_LSCC = TumorTypeccRCC_anno3MTLS - TumorTypeLSCC_anno3MTLS,\n  par_inRCC_vs_LSCC = TumorTypeccRCC_anno3parenchymal -TumorTypeLSCC_anno3parenchymal,\n  allTLS_inRCC_vs_LSCC = (TumorTypeccRCC_anno3ETLS + TumorTypeccRCC_anno3MTLS)/2 - (TumorTypeLSCC_anno3ETLS + TumorTypeLSCC_anno3MTLS)/2,\n  levels=design2)\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nres_mod2 &lt;- lapply(res_mod2, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\nlog_FC_tab &lt;- res_mod2 |&gt; bind_rows(.id = \"contrast\")\n\n# Function for signficance thresholds\ncase_sig &lt;- function(FDR1, FDR2, com1, com2, FDR_t){\n  case_when(\n  FDR1 &lt;= FDR_t & !! FDR2 &lt;= FDR_t ~ \"both\",\n  FDR1 &lt;= FDR_t & !! FDR2 &gt; FDR_t ~ com1,\n  FDR1 &gt; FDR_t & !! FDR2 &lt;= FDR_t ~ com2,\n  FDR1 &gt; FDR_t & !! FDR2 &gt; FDR_t ~ \"none\"\n)\n}\n\n## plotting function\nlogFC_plot &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1,\n                       logFC_both = 0.5){\n  # subset dataframe\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR))\n  \n  # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  # Add to res list\n  res_nam &lt;- paste0(comp1, \"_\", comp2)\n  \n  # Add genes to highlight\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    highlight = case_when(\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        abs(!!sym(logFC_comp1)) &gt; logFC_both ~ gene,\n      .default = \"\"\n      )\n    ) \n  # plot limits\n  max_lim1 &lt;- max(abs(min(log_FC_sub[,logFC_comp1])), \n                  max(log_FC_sub[,logFC_comp1]))\n  max_lim2 &lt;- max(abs(min(log_FC_sub[,logFC_comp2])), \n                  max(log_FC_sub[,logFC_comp2]))\n  \n  # colors\n  color_pal &lt;- c(\"grey\",\"#fdb462\", \"#ff6666\",\"#0099cc\")\n  names(color_pal) &lt;- c(\"none\", \"both\", comp1, comp2)\n  \n  # plot\n  p &lt;- ggplot(log_FC_sub, aes_string(x=logFC_comp1, \n                       y=logFC_comp2)) + \n    geom_point(aes(colour = sig), size = 0.9, alpha = 0.7) +\n    xlim(-max_lim1, max_lim1) +\n    ylim(-max_lim2, max_lim2) +\n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) + \n    scale_color_manual(values = color_pal) + \n    theme_bw()\n  \n  # annotations\n  p + geom_text_repel(\n    aes(label = highlight),\n    family = \"Poppins\",\n    size = 2,\n    min.segment.length = 0, \n    seed = 42, \n    box.padding = 0.5,\n    max.overlaps = Inf,\n    arrow = arrow(length = unit(0.005, \"npc\")),\n    nudge_x = .15,\n    nudge_y = .5,\n    color = \"#3D3D3D\"\n  )\n}\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTo select TLS-specific DE genes specific to each tumor type we use results from model2. Results are then filtered for genes that are also significant in the parenchymal comparison of the tumor (excluded), if the genes were not shown to be specific to TLS maturation by showing significant differences in model1 comparisons (both_TLS). Genes only significant in the non parenchymal comparison of model2 (sig_TLS) and those significant in the TLS-spcific and parenchymal comparison of the tumor showing an opposite effect (opposite) were selected.\n\n\nCode\nsel_TLS &lt;- function(res, pat, fdr){\n  pat_nam &lt;- grep(pat, names(res), value = T)\n  pat_nam &lt;- grep(\"par\", pat_nam, value = T)\n  sub_res &lt;- lapply(pat_nam, function(nam){\n    res_sel &lt;- res[[nam]] |&gt; filter(logFC &gt; 0 & FDR &lt; fdr)\n    res_sel$gene &lt;- rownames(res_sel)\n    data.frame(res_sel)\n  }) |&gt; bind_rows(.id = \"comp\")\n}\n\nTLS_RCC &lt;- sel_TLS(res_mod1, \"RCC\", fdr = 0.05)\nTLS_RCC_gene &lt;- unique(TLS_RCC$gene)\nwrite.csv(TLS_RCC_gene, paste0(\"../outs/TLS_RCC_genes_vis.csv\"))\n\nTLS_LSCC &lt;- sel_TLS(res_mod1, \"LSCC\", fdr = 0.05)\nTLS_LSCC_gene &lt;- unique(TLS_LSCC$gene)\nwrite.csv(TLS_LSCC_gene, paste0(\"../outs/TLS_LSCC_genes_vis.csv\"))\n\n# General exclusion list\n# Genes sig DE in parenchymal comparison, but not sig in tumor-specific TLS maturation\npar_res &lt;- res_mod2[[\"par_inRCC_vs_LSCC\"]] |&gt; \n  filter(FDR &lt; 0.05) |&gt; \n  data.frame()\npar_res$gene &lt;- rownames(par_res)\n\nexclude &lt;- par_res[!par_res$gene %in% c(TLS_RCC_gene, TLS_LSCC_gene),]\nwrite.csv(exclude, paste0(\"../outs/excluded_parenchymal_genes_vis.csv\"))\n\nsel_genes &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1){\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, F,contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR, F))\n  \n   # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  \n   # Genes to exclude\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    selected = case_when(\n      # exclude all sig in both & same sign & not in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        !gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"exclude\",\n      # include sig in both & same sign & in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"both_TLS\",\n      # sig all sig in TLS only\n      sig %in% comp1 ~ \"sig_TLS\",\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) != sign(!!sym(logFC_comp2)) ~ \"opposite\",\n      .default = \"none\"\n      )\n    )\n  par_nam &lt;- grep(\"_par_\", colnames(log_FC_sub))\n  log_FC_sub &lt;- log_FC_sub |&gt; select(-par_nam)\n  }\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# DE objects\nfilenames &lt;- list.files(\"../outs/DE\", pattern=\"*.csv\", full.names=TRUE)\nfilenam &lt;- list.files(\"../outs/DE\", pattern=\"*.csv\", full.names=FALSE)\nfilenam &lt;- gsub(\".csv$\", \"\", filenam)\nde_list &lt;- lapply(filenames, read.csv)\nnames(de_list) &lt;- filenam\n\n\n# subset res to de-genes\nde_gen_list &lt;- lapply(de_list, function(.){\n  if(! \"gene\" %in% colnames(.)){\n      .$gene &lt;- .$X\n  }\n  .\n}) \n\nmod1_names &lt;- grep(\"model1_\", names(de_gen_list), value = T)\nmod2_names &lt;- grep(\"model2_\", names(de_gen_list), value = T)\n\n\ngeo_mod1 &lt;- de_gen_list[mod1_names]\ngeo_mod2 &lt;- de_gen_list[mod2_names]\n\nnames(geo_mod1) &lt;- gsub(\"model1_\", \"\", names(geo_mod1))\nnames(geo_mod2) &lt;- gsub(\"model2_\", \"\", names(geo_mod2))\n\n\n\n\n\n\n\nCode\nres_mod2 &lt;- lapply(res_mod2, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\nres_mod1 &lt;- lapply(res_mod1, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\ncase_sig &lt;- function(FDR1, FDR2, com1, com2, FDR_t){\n  case_when(\n  FDR1 &lt;= FDR_t & !! FDR2 &lt;= FDR_t ~ \"both\",\n  FDR1 &lt;= FDR_t & !! FDR2 &gt; FDR_t ~ com1,\n  FDR1 &gt; FDR_t & !! FDR2 &lt;= FDR_t ~ com2,\n  FDR1 &gt; FDR_t & !! FDR2 &gt; FDR_t ~ \"none\"\n)\n}\n\n\n## plotting function\nlogFC_plot &lt;- function(log_FC_tab,\n                       comp1, \n                       comp2, \n                       FDR_t = 0.1,\n                       logFC_both = 0.5){\n  # subset dataframe\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    select(c(logFC,FDR,gene, tech)) |&gt; \n    pivot_wider(names_from = tech, \n                values_from = c(logFC, FDR))\n  \n  # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  # Add genes to highlight\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    highlight = case_when(\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) ~ gene,\n      .default = \"\"\n      )\n    ) \n  \n  # colors\n  color_pal &lt;- c(\"grey\",\"#fdb462\", \"#ff6666\",\"#0099cc\")\n  names(color_pal) &lt;- c(\"none\", \"both\", comp1, comp2)\n  \n  # plot\n  p &lt;- ggplot(log_FC_sub, aes_string(x=logFC_comp1, \n                       y=logFC_comp2)) + \n    geom_point(aes(colour = sig), size = 0.9, alpha = 0.7) +\n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) + \n    #xlim(0, 1) +\n    #ylim(0, 1) +\n    scale_color_manual(values = color_pal) + \n    theme_bw()\n  \n  # annotations\n  #p + geom_text_repel(\n  #  aes(label = highlight),\n  #  family = \"Poppins\",\n  #  size = 2,\n  #  min.segment.length = 0, \n  #  seed = 42, \n  #  box.padding = 0.5,\n  #  max.overlaps = Inf,\n  #  arrow = arrow(length = unit(0.005, \"npc\")),\n  #  nudge_x = .15,\n  #  nudge_y = .5,\n  #  color = \"#3D3D3D\"\n  #)\n  p\n}\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\",\"outs\", \"01-sce.rds\"))\n\nsce &lt;- sce[,!sce$TissueSub %in% \"LN\"]\nsce$Origin &lt;- sce$TissueSub |&gt; forcats::fct_collapse(\n  \"parenchymal\" = c(\"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\nsce$Origin &lt;- sce$Origin |&gt; droplevels()\nsce$Origin &lt;- relevel(sce$Origin, ref=\"parenchymal\")\n\n\nsce$anno5 &lt;- paste0(sce$PatientID, \"_\", sce$Origin)\npb_geo &lt;- aggregateAcrossCells(sce, ids=sce$anno5, use.assay.type=\"logcounts\",\n                               statistics = \"mean\")\npb_geo$PatientID &lt;- gsub(\"^r\", \"\", pb_geo$PatientID)\npb_geo$anno3 &lt;- pb_geo$Origin\nlevels(pb_geo$anno3) &lt;- list(parenchymal  = \"parenchymal\", \n                              ETLS = \"E_TLS\",\n                              MTLS = \"SFL_TLS\",\n                              EXCL = \"PFL_TLS\",\n                              EXCL = \"Tcell_TLS\")\n\nspe$PatientID &lt;- gsub(\".*_\", \"\", spe$sample_id)\nspe$anno5 &lt;- paste0(spe$PatientID, \"_\", spe$anno3)\npb_vis &lt;- aggregateAcrossCells(spe, ids=spe$anno5, use.assay.type=\"logcounts\",\n                               statistics = \"mean\")\n#pb_vis &lt;-pb_vis[keep,]\n\noverlap_gene &lt;- intersect(rownames(pb_vis), rownames(pb_geo))\noverlap_pat &lt;- intersect(pb_geo$PatientID, pb_vis$PatientID)\n\n\n\n17776_ETLS17776_MTLS17776_parenchymal24136_ETLS24136_MTLS24136_parenchymal32288_ETLS32288_MTLS32288_parenchymal24784_ETLS24784_MTLS24784_parenchymal30616_ETLS30616_MTLS30616_parenchymal8527_ETLS8527_MTLS8527_parenchymal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\nCode\ngeo_exclude &lt;- read.csv(\"../outs/excluded_parenchymal_genes.csv\")\ngeo_TLS_RCC &lt;- read.csv(\"../outs/TLS_RCC_genes.csv\")\ngeo_TLS_LSCC &lt;- read.csv(\"../outs/TLS_LSCC_genes.csv\")\n\ngene_geo &lt;- rownames(sce)\ngene_vis &lt;- rownames(spe)\n\ngene_types &lt;- data.frame(\"gene\" = unique(c(gene_geo, gene_vis)))\ngene_types &lt;- gene_types |&gt; mutate(\"gene_type\" = case_when(\n          gene %in% exclude$gene | gene %in% geo_exclude$gene ~ \"parenchymal\",\n          gene %in% TLS_LSCC_gene & !gene %in% geo_exclude$gene | \n            gene %in% geo_TLS_LSCC$x & !gene %in% exclude$gene ~ \"TLS_LSCC\",\n          gene %in% TLS_RCC_gene & !gene %in% geo_exclude$gene | \n            gene %in% geo_TLS_RCC$x & !gene %in% exclude$gene ~ \"TLS_RCC\",\n          .default = NA\n        ))\ngene_types &lt;- gene_types |&gt; mutate(\"expr\" = case_when(\n          gene %in% rownames(sce) & gene %in% rownames(spe) ~ \"both\",\n          gene %in% rownames(sce) & !gene %in% rownames(spe) ~ \"geo\",\n          !gene %in% rownames(sce) & gene %in% rownames(spe) ~ \"vis\",\n          .default = \"None\")\n        )\n\ntechs &lt;- levels(as.factor(gene_types$expr))\ngene_sum &lt;- lapply(techs, function(type){\n  gene_list &lt;- gene_types$gene[gene_types$expr %in% type]\n  gene_tab &lt;- data.frame(\"gene\" = gene_list, \n                         \"vis\" = rep(NA, length(gene_list)),\n                         \"geo\" = rep(NA, length(gene_list)))\n  gene_tab$vis[gene_tab$gene %in% rownames(spe)] &lt;- \n    rowMeans(logcounts(spe)[gene_tab$gene[gene_tab$gene %in% rownames(spe)],]) \n  gene_tab$geo[gene_tab$gene %in% rownames(sce)] &lt;- \n    rowMeans(logcounts(sce)[gene_tab$gene[gene_tab$gene %in% rownames(sce)],])\n  gene_tab\n})\n\nnames(gene_sum) &lt;- techs\n\ngene_types &lt;- gene_types |&gt; group_by(expr, gene_type) |&gt; summarise(n=n())\nggplot(gene_types, aes(fill=expr, y=n, x=gene_type)) + \n              geom_bar(position=\"stack\", stat=\"identity\") +\n          theme_bw() +\n  scale_fill_brewer(na.value = \"grey\", palette = \"Set2\") \n\n\n\n\n\n\n\n\nbothgeovis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n17776_ETLS17776_MTLS17776_parenchymal24136_ETLS24136_MTLS24136_parenchymal32288_ETLS32288_MTLS32288_parenchymal24784_ETLS24784_MTLS24784_parenchymal30616_ETLS30616_MTLS30616_parenchymal8527_ETLS8527_MTLS8527_parenchymal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] “Sample not complete”\n\n\n\n\n\n\n\n\n[1] “Sample not complete”"
  },
  {
    "objectID": "vis-02-tls.html",
    "href": "vis-02-tls.html",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(scran)\nlibrary(scater)\nlibrary(scuttle)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(patchwork)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")\n\n\n\n\n\n\n\n\n\n\nCode\n# add tissue types\nspe$TissueType &lt;- ifelse(\n    spe$TumorType == \"ccRCC\", \n    yes = \"kid\", no = \"lun\")\n# exclude unassigned & \n# spots tagged for exclusion\nnan &lt;- is.na(spe$anno1) | is.na(spe$anno2)\nrmv &lt;- grepl(\"EXCL\", spe$anno1)\nsub &lt;- spe[, !(nan | rmv)]\n# subset regions of interest\nids &lt;- c(\"INFL\", \"TLS\", \"LN\")\nsub &lt;- sub[, sub$anno1 %in% ids]\nsub$anno1 &lt;- droplevels(sub$anno1)\n# subset samples of interest\nids &lt;- c(\"B04_17776\", \"B06_24137\", \"B06_24784\")\nsub &lt;- sub[, sub$sample_id %in% ids]\nsub$sample_id &lt;- droplevels(sub$sample_id)\n# simplify annotations\nsub$anno3 &lt;- as.character(sub$anno2)\nsub$anno3[grep(\".*ETLS\", sub$anno3)] &lt;- \"E_TLS\"\nsub$anno3[grep(\".*MTLS\", sub$anno3)] &lt;- \"M_TLS\"\nsub$anno3 &lt;- factor(sub$anno3, exclude = NULL)\ntable(sub$sample_id, sub$anno3)\n\n\n           \n            E_TLS INFL  LN M_TLS\n  B04_17776    68  140   0    94\n  B06_24137   235   62  33   166\n  B06_24784    89  173   0    53\n\n\nCode\ntable(sub$anno1, sub$anno3)\n\n\n      \n       E_TLS INFL  LN M_TLS\n  INFL     1  375   0     5\n  TLS    391    0   0   308\n  LN       0    0  33     0\n\n\n\n\n\n\n\nCode\n# keep features detected in at least 20 spots in any sample\n# and spots with at least 200 detected features overall\nidx &lt;- split(seq(ncol(sub)), sub$sample_id)\ngs &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(sub[, .]) &gt; 0\n    rowSums(y) &gt;= 20\n})\nfil &lt;- sub[rowAnys(gs), ]\nfil &lt;- fil[, colSums(counts(fil) &gt; 0) &gt;= 200]\ncbind(spe = dim(spe), sub = dim(sub), fil = dim(fil))\n\n\n       spe   sub  fil\n[1,] 16643 16643 8814\n[2,] 27595  1113 1065\n\n\n\n\n\n\n\n\nCode\n# split by sample\nidx &lt;- split(seq(ncol(sub)), sub$sample_id)\nlys &lt;- lapply(idx, \\(.) sub[, .])\n# feature selection & PCA\nlys &lt;- lapply(lys, \\(.) {\n  tbl &lt;- modelGeneVar(.) \n  hvg &lt;- rowData(.)$hvg &lt;- tbl$bio &gt; 0\n  runPCA(., subset_row = hvg) \n})\n# within TLS only\ntls &lt;- lapply(lys, \\(.) {\n  . &lt;- .[, .$anno1 == \"TLS\"]\n  .$anno3 &lt;- droplevels(.$anno3)\n  tbl &lt;- modelGeneVar(.) \n  hvg &lt;- rowData(.)$hvg &lt;- tbl$bio &gt; 0\n  runPCA(., subset_row = hvg) \n})\n\n\n\n\nCode\nthm &lt;- list(\n  coord_equal(),\n  theme(legend.key.size = unit(0.5, \"lines\")),\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 2))))\npal &lt;- hcl.colors(nlevels(sub$anno3), \"Set 2\")\n\nlapply(lys, plotPCA, color_by = \"anno3\") |&gt;\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = pal, drop = FALSE)\n\n\n\n\n\nCode\nlapply(tls, plotPCA, color_by = \"anno3\") |&gt;\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = c(\"red\", \"blue\"))\n\n\n\n\n\n\n\nCode\nvar &lt;- sapply(tls, \\(.) {\n  var &lt;- modelGeneVar(.)$bio\n  setNames(var, rownames(.))\n})\n# top variables across all sample\no &lt;- order(rowMeans(var), decreasing = TRUE)\n(sel &lt;- rownames(var)[head(o, 12)])\n\n\n [1] \"IGHG1\"   \"IGKV4.1\" \"IGHG2\"   \"IGLC1\"   \"IGLV3.1\" \"IGHG3\"   \"IGHA1\"  \n [8] \"IGHG4\"   \"CLU\"     \"IGHJ6\"   \"XBP1\"    \"H4C4\"   \n\n\n\n\nCode\nlapply(tls, \\(sce) {\n  lapply(sel, \\(g) plotPCA(sce, color_by = g)) |&gt;\n    wrap_plots() + plot_layout(nrow = 3) & coord_equal()\n}) \n\n\n$B04_17776\n\n\n\n\n\n\n$B06_24137\n\n\n\n\n\n\n$B06_24784\n\n\n\n\n\n\n\nCode\n# top variables by sample\nsel &lt;- apply(var, 2, \\(.) {\n  o &lt;- order(., decreasing = TRUE)\n  names(.)[head(o, 20)]\n}, simplify = FALSE)\nlapply(names(tls), \\(.) {\n  x &lt;- tls[[.]][sel[[.]], ]\n  cd &lt;- data.frame(colData(x))\n  cd &lt;- cd[c(\"total\", \"anno3\")]\n  hm &lt;- pheatmap(\n    main = .,\n    logcounts(x),\n    scale = \"none\",\n    annotation_col = cd,\n    show_colnames = FALSE)\n  print(hm)\n})\n\n\n\n\n\n\n\n\n\n\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL"
  },
  {
    "objectID": "vis-02-tls.html#preamble",
    "href": "vis-02-tls.html#preamble",
    "title": "TLS",
    "section": "",
    "text": "Code\nlibrary(scran)\nlibrary(scater)\nlibrary(scuttle)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(patchwork)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")"
  },
  {
    "objectID": "vis-02-tls.html#setup",
    "href": "vis-02-tls.html#setup",
    "title": "TLS",
    "section": "",
    "text": "Code\n# add tissue types\nspe$TissueType &lt;- ifelse(\n    spe$TumorType == \"ccRCC\", \n    yes = \"kid\", no = \"lun\")\n# exclude unassigned & \n# spots tagged for exclusion\nnan &lt;- is.na(spe$anno1) | is.na(spe$anno2)\nrmv &lt;- grepl(\"EXCL\", spe$anno1)\nsub &lt;- spe[, !(nan | rmv)]\n# subset regions of interest\nids &lt;- c(\"INFL\", \"TLS\", \"LN\")\nsub &lt;- sub[, sub$anno1 %in% ids]\nsub$anno1 &lt;- droplevels(sub$anno1)\n# subset samples of interest\nids &lt;- c(\"B04_17776\", \"B06_24137\", \"B06_24784\")\nsub &lt;- sub[, sub$sample_id %in% ids]\nsub$sample_id &lt;- droplevels(sub$sample_id)\n# simplify annotations\nsub$anno3 &lt;- as.character(sub$anno2)\nsub$anno3[grep(\".*ETLS\", sub$anno3)] &lt;- \"E_TLS\"\nsub$anno3[grep(\".*MTLS\", sub$anno3)] &lt;- \"M_TLS\"\nsub$anno3 &lt;- factor(sub$anno3, exclude = NULL)\ntable(sub$sample_id, sub$anno3)\n\n\n           \n            E_TLS INFL  LN M_TLS\n  B04_17776    68  140   0    94\n  B06_24137   235   62  33   166\n  B06_24784    89  173   0    53\n\n\nCode\ntable(sub$anno1, sub$anno3)\n\n\n      \n       E_TLS INFL  LN M_TLS\n  INFL     1  375   0     5\n  TLS    391    0   0   308\n  LN       0    0  33     0\n\n\n\n\n\n\n\nCode\n# keep features detected in at least 20 spots in any sample\n# and spots with at least 200 detected features overall\nidx &lt;- split(seq(ncol(sub)), sub$sample_id)\ngs &lt;- sapply(idx, \\(.) {\n    y &lt;- counts(sub[, .]) &gt; 0\n    rowSums(y) &gt;= 20\n})\nfil &lt;- sub[rowAnys(gs), ]\nfil &lt;- fil[, colSums(counts(fil) &gt; 0) &gt;= 200]\ncbind(spe = dim(spe), sub = dim(sub), fil = dim(fil))\n\n\n       spe   sub  fil\n[1,] 16643 16643 8814\n[2,] 27595  1113 1065"
  },
  {
    "objectID": "vis-02-tls.html#analysis",
    "href": "vis-02-tls.html#analysis",
    "title": "TLS",
    "section": "",
    "text": "Code\n# split by sample\nidx &lt;- split(seq(ncol(sub)), sub$sample_id)\nlys &lt;- lapply(idx, \\(.) sub[, .])\n# feature selection & PCA\nlys &lt;- lapply(lys, \\(.) {\n  tbl &lt;- modelGeneVar(.) \n  hvg &lt;- rowData(.)$hvg &lt;- tbl$bio &gt; 0\n  runPCA(., subset_row = hvg) \n})\n# within TLS only\ntls &lt;- lapply(lys, \\(.) {\n  . &lt;- .[, .$anno1 == \"TLS\"]\n  .$anno3 &lt;- droplevels(.$anno3)\n  tbl &lt;- modelGeneVar(.) \n  hvg &lt;- rowData(.)$hvg &lt;- tbl$bio &gt; 0\n  runPCA(., subset_row = hvg) \n})\n\n\n\n\nCode\nthm &lt;- list(\n  coord_equal(),\n  theme(legend.key.size = unit(0.5, \"lines\")),\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 2))))\npal &lt;- hcl.colors(nlevels(sub$anno3), \"Set 2\")\n\nlapply(lys, plotPCA, color_by = \"anno3\") |&gt;\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = pal, drop = FALSE)\n\n\n\n\n\nCode\nlapply(tls, plotPCA, color_by = \"anno3\") |&gt;\n  wrap_plots() + plot_layout(guides = \"collect\") & \n  thm & scale_color_manual(values = c(\"red\", \"blue\"))\n\n\n\n\n\n\n\nCode\nvar &lt;- sapply(tls, \\(.) {\n  var &lt;- modelGeneVar(.)$bio\n  setNames(var, rownames(.))\n})\n# top variables across all sample\no &lt;- order(rowMeans(var), decreasing = TRUE)\n(sel &lt;- rownames(var)[head(o, 12)])\n\n\n [1] \"IGHG1\"   \"IGKV4.1\" \"IGHG2\"   \"IGLC1\"   \"IGLV3.1\" \"IGHG3\"   \"IGHA1\"  \n [8] \"IGHG4\"   \"CLU\"     \"IGHJ6\"   \"XBP1\"    \"H4C4\"   \n\n\n\n\nCode\nlapply(tls, \\(sce) {\n  lapply(sel, \\(g) plotPCA(sce, color_by = g)) |&gt;\n    wrap_plots() + plot_layout(nrow = 3) & coord_equal()\n}) \n\n\n$B04_17776\n\n\n\n\n\n\n$B06_24137\n\n\n\n\n\n\n$B06_24784\n\n\n\n\n\n\n\nCode\n# top variables by sample\nsel &lt;- apply(var, 2, \\(.) {\n  o &lt;- order(., decreasing = TRUE)\n  names(.)[head(o, 20)]\n}, simplify = FALSE)\nlapply(names(tls), \\(.) {\n  x &lt;- tls[[.]][sel[[.]], ]\n  cd &lt;- data.frame(colData(x))\n  cd &lt;- cd[c(\"total\", \"anno3\")]\n  hm &lt;- pheatmap(\n    main = .,\n    logcounts(x),\n    scale = \"none\",\n    annotation_col = cd,\n    show_colnames = FALSE)\n  print(hm)\n})\n\n\n\n\n\n\n\n\n\n\n\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL"
  },
  {
    "objectID": "geo-04-pseudotime_TLS.html",
    "href": "geo-04-pseudotime_TLS.html",
    "title": "Pseudotime sample",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scran)\nlibrary(scuttle)\nlibrary(scater)\nlibrary(TSCAN)\nlibrary(ggbeeswarm)\nlibrary(ggthemes)\nlibrary(SingleCellExperiment)\nlibrary(ExploreModelMatrix)\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\n\nCode\n# select TLS only\nsce_sub &lt;- sce[, sce$TissueType %in% c(\"TLS\")]\n\n# select hvg independent of patient effects for TLS only\ntbl &lt;- modelGeneVar(sce, block = sce$patientID)\nhvg &lt;- tbl$bio &gt; 0\n\n# calculate lowerd dims\nsce_sub &lt;- runPCA(sce_sub, subset_row = hvg)\nsce_sub &lt;- runTSNE(sce_sub)\nsce_sub &lt;- runUMAP(sce_sub)\n\n\n\n\nCode\n# TSCAN's minmum spanning tree\nsce_sub$broad_label &lt;-sce_sub$TissueSub |&gt; \n  forcats::fct_collapse(\"early\" = c(\"E_TLS\", \"Tcell_TLS\"),\n                        \"late\" = c(\"SFL_TLS\", \"PFL_TLS\"))\n\nby.cluster &lt;- aggregateAcrossCells(sce_sub, ids=sce_sub$broad_label)\ncentroids &lt;- reducedDim(by.cluster, \"PCA\")\nmst &lt;- TSCAN::createClusterMST(centroids, clusters=NULL)\nmst\n\n\nIGRAPH 09aafe7 UNW- 2 1 -- \n+ attr: name (v/c), coordinates (v/x), weight (e/n), gain (e/n)\n+ edge from 09aafe7 (vertex names):\n[1] early--late\n\n\n\n\nCode\n# TSCAN's minmum spanning tree in TSNE\n\nline.data &lt;- reportEdges(by.cluster, mst=mst, clusters=NULL, use.dimred=\"TSNE\")\n\nplotPCA(sce_sub, colour_by=\"TissueSub\") + \n    geom_line(data=line.data, mapping=aes(x=TSNE1, y=TSNE2, group=edge))\n\n\n\n\n\n\n\nCode\n# Get a pseudotime orddering\nmap.tscan &lt;- mapCellsToEdges(sce_sub, \n                             mst=mst, \n                             use.dimred=\"PCA\", \n                             clusters = sce_sub$broad_label)\ntscan.pseudo &lt;- orderCells(map.tscan, mst, start = \"early\")\n\ncommon.pseudo &lt;- averagePseudotime(tscan.pseudo)\nsce_sub$pseudotime &lt;- common.pseudo\nplotTSNE(sce_sub, colour_by=I(common.pseudo), \n        text_by=\"TissueSub\", text_colour=\"red\") +\n    geom_line(data=line.data, mapping=aes(x=TSNE1, y=TSNE2, group=edge))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\n## pseudotime rank\nsce_sub$pseudotime_rank &lt;- rank(sce_sub$pseudotime)\n\nggplot(as.data.frame(colData(sce_sub)), aes(x = pseudotime, y = TumorType, \n                                             colour = TissueSub)) +\n    geom_quasirandom(groupOnX = FALSE) +\n    scale_color_tableau() + theme_bw() +\n    xlab(\"pseudotime\") + ylab(\"Tumor type\") +\n    ggtitle(\"Cells ordered by pseudotime\")\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\nggplot(as.data.frame(colData(sce_sub)), aes(x = pseudotime, y = TissueSub, \n                                             colour = TissueSub)) +\n    geom_quasirandom(orientation = \"y\") +\n    scale_color_tableau() + theme_bw() +\n    xlab(\"pseudotime\") + ylab(\"Differentiation status\") +\n    ggtitle(\"Cells ordered by pseudotime\") + \n      facet_wrap(~TumorType, ncol = 1)\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\nggplot(as.data.frame(colData(sce_sub)), \n       aes(x = pseudotime, \n           y = interaction(TumorType, TissueSub),\n           colour = interaction(TumorType, TissueSub),\n           group = interaction(TissueSub, TumorType))) +\n    geom_quasirandom(orientation = \"y\") +\n    scale_color_brewer(palette=\"Paired\") +\n    #scale_color_tableau(palette = \"Tableau 20\") + \n    theme_bw() +\n    theme(legend.position = \"none\") +\n    xlab(\"pseudotime\") + ylab(\"Differentiation status\") +\n    ggtitle(\"Cells ordered by pseudotime\")"
  },
  {
    "objectID": "geo-04-pseudotime_TLS.html#preamble",
    "href": "geo-04-pseudotime_TLS.html#preamble",
    "title": "Pseudotime sample",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scran)\nlibrary(scuttle)\nlibrary(scater)\nlibrary(TSCAN)\nlibrary(ggbeeswarm)\nlibrary(ggthemes)\nlibrary(SingleCellExperiment)\nlibrary(ExploreModelMatrix)\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))"
  },
  {
    "objectID": "geo-04-pseudotime_TLS.html#analysis",
    "href": "geo-04-pseudotime_TLS.html#analysis",
    "title": "Pseudotime sample",
    "section": "",
    "text": "Code\n# select TLS only\nsce_sub &lt;- sce[, sce$TissueType %in% c(\"TLS\")]\n\n# select hvg independent of patient effects for TLS only\ntbl &lt;- modelGeneVar(sce, block = sce$patientID)\nhvg &lt;- tbl$bio &gt; 0\n\n# calculate lowerd dims\nsce_sub &lt;- runPCA(sce_sub, subset_row = hvg)\nsce_sub &lt;- runTSNE(sce_sub)\nsce_sub &lt;- runUMAP(sce_sub)\n\n\n\n\nCode\n# TSCAN's minmum spanning tree\nsce_sub$broad_label &lt;-sce_sub$TissueSub |&gt; \n  forcats::fct_collapse(\"early\" = c(\"E_TLS\", \"Tcell_TLS\"),\n                        \"late\" = c(\"SFL_TLS\", \"PFL_TLS\"))\n\nby.cluster &lt;- aggregateAcrossCells(sce_sub, ids=sce_sub$broad_label)\ncentroids &lt;- reducedDim(by.cluster, \"PCA\")\nmst &lt;- TSCAN::createClusterMST(centroids, clusters=NULL)\nmst\n\n\nIGRAPH 09aafe7 UNW- 2 1 -- \n+ attr: name (v/c), coordinates (v/x), weight (e/n), gain (e/n)\n+ edge from 09aafe7 (vertex names):\n[1] early--late\n\n\n\n\nCode\n# TSCAN's minmum spanning tree in TSNE\n\nline.data &lt;- reportEdges(by.cluster, mst=mst, clusters=NULL, use.dimred=\"TSNE\")\n\nplotPCA(sce_sub, colour_by=\"TissueSub\") + \n    geom_line(data=line.data, mapping=aes(x=TSNE1, y=TSNE2, group=edge))\n\n\n\n\n\n\n\nCode\n# Get a pseudotime orddering\nmap.tscan &lt;- mapCellsToEdges(sce_sub, \n                             mst=mst, \n                             use.dimred=\"PCA\", \n                             clusters = sce_sub$broad_label)\ntscan.pseudo &lt;- orderCells(map.tscan, mst, start = \"early\")\n\ncommon.pseudo &lt;- averagePseudotime(tscan.pseudo)\nsce_sub$pseudotime &lt;- common.pseudo\nplotTSNE(sce_sub, colour_by=I(common.pseudo), \n        text_by=\"TissueSub\", text_colour=\"red\") +\n    geom_line(data=line.data, mapping=aes(x=TSNE1, y=TSNE2, group=edge))\n\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\n## pseudotime rank\nsce_sub$pseudotime_rank &lt;- rank(sce_sub$pseudotime)\n\nggplot(as.data.frame(colData(sce_sub)), aes(x = pseudotime, y = TumorType, \n                                             colour = TissueSub)) +\n    geom_quasirandom(groupOnX = FALSE) +\n    scale_color_tableau() + theme_bw() +\n    xlab(\"pseudotime\") + ylab(\"Tumor type\") +\n    ggtitle(\"Cells ordered by pseudotime\")\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\nggplot(as.data.frame(colData(sce_sub)), aes(x = pseudotime, y = TissueSub, \n                                             colour = TissueSub)) +\n    geom_quasirandom(orientation = \"y\") +\n    scale_color_tableau() + theme_bw() +\n    xlab(\"pseudotime\") + ylab(\"Differentiation status\") +\n    ggtitle(\"Cells ordered by pseudotime\") + \n      facet_wrap(~TumorType, ncol = 1)\n\n\n\n\n\n\n\n\n\n\nCode\n# One dimensional ordering by pseudotime\n\nggplot(as.data.frame(colData(sce_sub)), \n       aes(x = pseudotime, \n           y = interaction(TumorType, TissueSub),\n           colour = interaction(TumorType, TissueSub),\n           group = interaction(TissueSub, TumorType))) +\n    geom_quasirandom(orientation = \"y\") +\n    scale_color_brewer(palette=\"Paired\") +\n    #scale_color_tableau(palette = \"Tableau 20\") + \n    theme_bw() +\n    theme(legend.position = \"none\") +\n    xlab(\"pseudotime\") + ylab(\"Differentiation status\") +\n    ggtitle(\"Cells ordered by pseudotime\")"
  },
  {
    "objectID": "geo-02-differential.html",
    "href": "geo-02-differential.html",
    "title": "Differential",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scuttle)\nlibrary(pheatmap)\nlibrary(patchwork)\nlibrary(ggbeeswarm)\nlibrary(EnhancedVolcano)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\nCode\n.volcano &lt;- \\(df, title, fdr = 0.05, lfc = 1) {\n  EnhancedVolcano(df, \n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = title, subtitle = NULL,\n    lab = df[[\"gene\"]], labSize = 2, \n    drawConnectors = TRUE, widthConnectors = 0.5) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) + theme(\n    aspect.ratio = 1,\n    legend.title = element_blank(),\n    panel.grid.minor = element_blank())\n}\n\n\n\n\n\n\n\n\nCode\n# exclude LN for DGE analysis\nsub &lt;- sce[, sce$TissueSub != \"LN\"]\ndf &lt;- data.frame(colData(sub), t(logcounts(sub)), check.names = FALSE)\ngg &lt;- pivot_longer(df, any_of(rownames(sub)), names_to = \"gene\", values_to = \"expr\")\n\n\n\n\nCode\n# setup subtype groupings\nnames(tum) &lt;- tum &lt;- c(\"RCC\", \"LSCC\")\nnames(kid) &lt;- kid &lt;- c(\"Kidney\", \"RCC\")\nnames(lun) &lt;- lun &lt;- c(\"Alveoles\", \"LSCC\")\nnames(tls) &lt;- tls &lt;- c(\"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\")\n# split data by tumor type & TLS\ndat &lt;- c(list(all = sub,\n    RCC = sub[, sub$TumorType == \"RCC\"], \n    LSCC = sub[, sub$TumorType == \"LSCC\"]),\n    lapply(tls, \\(.) sub[, sub$TissueSub == .]))\n\n\n\n\nCode\nref &lt;- c(\n    all = unname(kid[1]),\n    RCC = unname(kid[1]), \n    LSCC = unname(lun[1]), \n    sapply(tls, \\(.) \"LSCC\"))\nnames(ids) &lt;- ids &lt;- names(dat)\ndat &lt;- dat[ids]; ref &lt;- ref[ids]\nfit &lt;- lapply(ids, \\(.) {\n    # setup design matrix\n    df &lt;- data.frame(colData(dat[[.]]))\n    if (. %in% tls) {\n        tt &lt;- factor(df$TumorType)\n        df$TumorType &lt;- relevel(tt, ref[.])\n        mm &lt;- model.matrix(~0+TumorType, df)\n        colnames(mm) &lt;- gsub(\"TumorType\", \"\", colnames(mm))\n    } else {\n        st &lt;- droplevels(df$TissueSub)\n        df$TissueSub &lt;- relevel(st, ref[.])\n        mm &lt;- model.matrix(~0+TissueSub, df)\n        colnames(mm) &lt;- gsub(\"TissueSub\", \"\", colnames(mm))\n    }\n    # fit GLM model\n    dgl &lt;- DGEList(assay(dat[[.]]))\n    dgl &lt;- calcNormFactors(dgl)\n    dgl &lt;- estimateDisp(dgl, mm)\n    fit &lt;- glmQLFit(dgl, mm)\n})\n\n\n\n\nCode\n# setup contrasts\ncs &lt;- c(list(\n    # within tumor types\n    RCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(kid, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(kid, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\"))),\n    LSCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(lun, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(lun, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\")))),\n    # kidney/RCC vs. lung/LSCC\n    list(all = list(parenchyma = list(kid, lun))),\n    # across tumor types, within TLS subsets\n    lapply(tls, \\(.) setNames(list(\"RCC\"), .)))\ncs &lt;- lapply(ids, \\(.) {\n    x &lt;- numeric(ncol(mm &lt;- fit[[.]]$design))\n    lapply(cs[[.]], \\(c) {\n        if (length(c) == 1) {\n            i &lt;- match(c, colnames(mm))\n            x[i] &lt;- 1; x[-i] &lt;- -1\n        } else {\n            a &lt;- match(c[[1]], colnames(mm))\n            b &lt;- match(c[[2]], colnames(mm))\n            x[a] &lt;- -1/sum(a != 0)\n            x[b] &lt;- 1/sum(b != 0)\n        }\n        return(x)\n    })\n})\n\n\n\n\nCode\n# run DGE analysis\nres &lt;- lapply(ids, \\(.) {\n    lapply(names(cs[[.]]), \\(c) {\n        ht &lt;- glmQLFTest(fit[[.]], contrast = cs[[.]][[c]])\n        tt &lt;- topTags(ht, n = Inf)$table\n        data.frame(row.names = NULL,\n            gene = rownames(tt), tt,\n            contrast = c, subset = .)\n    }) |&gt; do.call(what = rbind)\n}) |&gt; do.call(what = rbind)\nrownames(res) &lt;- NULL\n\n\n\n\n\n\n\n\n\nCode\ndf &lt;- res[res$subset == \"all\", ]\n.volcano(df, title = \"parenchyma\", fdr = 0.05, lfc = 1) + \n    theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\nps &lt;- lapply(tum, \\(.) {\n    df &lt;- res[res$subset == . & res$contrast == \"TLS\", ]\n    .volcano(df, title = ., fdr = 1e-4, lfc = 1.25)\n})\nwrap_plots(ps, nrow = 1) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\nps &lt;- lapply(tls, \\(.) {\n    df &lt;- res[res$subset == . & grepl(\"TLS\", res$contrast), ]\n    .volcano(df, title = ., fdr = 1e-3, lfc = 0.5)\n})\nwrap_plots(ps, nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\ndf &lt;- res[res$contrast %in% c(\"SFL\", \"Tcell\"), ]\nps &lt;- lapply(unique(df$subset), \\(s) {\n    lapply(unique(df$contrast), \\(c) {\n        df &lt;- res[res$subset == s & res$contrast == c, ]\n        .volcano(df, fdr = 1e-4, lfc = 1.25, title = paste(s, c, sep = \",\"))\n    })\n})\nwrap_plots(Reduce(c, ps), nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(FDR &lt; 0.05) %&gt;% \n    filter(subset == \"all\") %&gt;%\n    slice_max(abs(logFC), n = 80)\nmtx &lt;- logcounts(sub)[top$gene, sub$TissueSub %in% c(kid, lun)]\ncd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\nhm &lt;- pheatmap(mtx, \n    main = \"parenchyma\", fontsize = 6,\n    col = rev(hcl.colors(51, \"RdBu\")),\n    scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(!subset %in% tls) %&gt;%\n    group_by(subset) %&gt;%\n    filter(FDR &lt; 0.1, contrast == \"TLS\") %&gt;% \n    slice_max(abs(logFC), n = 40) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    mtx &lt;- logcounts(sub)[top[[.]]$gene, sub$TumorType == .]\n    cd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm &lt;- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    group_by(subset) %&gt;%\n    filter(contrast %in% c(\"SFL\", \"Tcell\")) %&gt;%\n    slice_max(abs(logFC), n = 40) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    idx &lt;- sub$TumorType == . & sub$TissueSub %in% c(\n        \"E_TLS\", paste0(unique(top[[.]]$contrast), \"_TLS\"))\n    mtx &lt;- logcounts(sub)[top[[.]]$gene, idx]\n    cd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm &lt;- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLSCCRCC\n\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(subset %in% tls) %&gt;%\n    group_by(subset) %&gt;%\n    slice_max(abs(logFC), n = 25) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    plt &lt;- ggplot(\n        filter(gg, \n            TissueSub == .,\n            gene %in% top[[.]]$gene),\n        aes(TumorType, expr, fill = TumorType)) +\n        facet_wrap(~ gene, scales = \"free_y\") +\n        geom_boxplot(size = 0.1, fill = NA, outlier.color = NA, show.legend = FALSE) + \n        geom_beeswarm(shape = 21, col = \"black\", stroke = 0.1, size = 1.2, alpha = 0.8) + \n        guides(fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +\n        labs(x = NULL, y = \"Expression (logCPM)\") +\n        scale_fill_brewer(palette = \"Set2\") +\n        theme_linedraw(9) + theme(\n            panel.grid = element_blank(),\n            axis.text.x = element_blank(),\n            axis.ticks.x = element_blank(),\n            strip.background = element_blank(),\n            legend.key.size = unit(0.5, \"lines\"),\n            strip.text = element_text(color = \"black\", face = \"bold\"))\n    print(plt); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(res, file.path(\"..\", \"outs\", \"02-dge.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] EnhancedVolcano_1.18.0      ggrepel_0.9.3              \n [3] ggbeeswarm_0.7.2            patchwork_1.1.3            \n [5] pheatmap_1.0.12             scuttle_1.10.2             \n [7] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.3         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] MatrixGenerics_1.12.3       matrixStats_1.0.0          \n[17] ggplot2_3.4.3               tidyr_1.3.0                \n[19] dplyr_1.1.3                 edgeR_3.42.4               \n[21] limma_3.56.2               \n\nloaded via a namespace (and not attached):\n [1] beeswarm_0.4.0            gtable_0.3.4             \n [3] xfun_0.40                 htmlwidgets_1.6.2        \n [5] lattice_0.22-5            Cairo_1.6-1              \n [7] vctrs_0.6.3               tools_4.3.2              \n [9] bitops_1.0-7              generics_0.1.3           \n[11] parallel_4.3.2            tibble_3.2.1             \n[13] fansi_1.0.4               pkgconfig_2.0.3          \n[15] Matrix_1.6-1              RColorBrewer_1.1-3       \n[17] sparseMatrixStats_1.12.2  lifecycle_1.0.3          \n[19] GenomeInfoDbData_1.2.10   farver_2.1.1             \n[21] compiler_4.3.2            munsell_0.5.0            \n[23] codetools_0.2-19          vipor_0.4.5              \n[25] htmltools_0.5.6           RCurl_1.98-1.12          \n[27] yaml_2.3.7                pillar_1.9.0             \n[29] crayon_1.5.2              BiocParallel_1.34.2      \n[31] DelayedArray_0.26.7       abind_1.4-5              \n[33] tidyselect_1.2.0          locfit_1.5-9.8           \n[35] digest_0.6.33             purrr_1.0.2              \n[37] labeling_0.4.3            splines_4.3.2            \n[39] fastmap_1.1.1             grid_4.3.2               \n[41] colorspace_2.1-0          cli_3.6.1                \n[43] magrittr_2.0.3            S4Arrays_1.0.6           \n[45] utf8_1.2.3                withr_2.5.1              \n[47] DelayedMatrixStats_1.22.6 scales_1.2.1             \n[49] rmarkdown_2.24            XVector_0.40.0           \n[51] beachmat_2.16.0           evaluate_0.21            \n[53] ggrastr_1.0.2             knitr_1.44               \n[55] rlang_1.1.1               Rcpp_1.0.11              \n[57] glue_1.6.2                rstudioapi_0.15.0        \n[59] jsonlite_1.8.7            R6_2.5.1                 \n[61] zlibbioc_1.46.0"
  },
  {
    "objectID": "geo-02-differential.html#preamble",
    "href": "geo-02-differential.html#preamble",
    "title": "Differential",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(scuttle)\nlibrary(pheatmap)\nlibrary(patchwork)\nlibrary(ggbeeswarm)\nlibrary(EnhancedVolcano)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\nCode\n.volcano &lt;- \\(df, title, fdr = 0.05, lfc = 1) {\n  EnhancedVolcano(df, \n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = title, subtitle = NULL,\n    lab = df[[\"gene\"]], labSize = 2, \n    drawConnectors = TRUE, widthConnectors = 0.5) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) + theme(\n    aspect.ratio = 1,\n    legend.title = element_blank(),\n    panel.grid.minor = element_blank())\n}"
  },
  {
    "objectID": "geo-02-differential.html#analysis",
    "href": "geo-02-differential.html#analysis",
    "title": "Differential",
    "section": "",
    "text": "Code\n# exclude LN for DGE analysis\nsub &lt;- sce[, sce$TissueSub != \"LN\"]\ndf &lt;- data.frame(colData(sub), t(logcounts(sub)), check.names = FALSE)\ngg &lt;- pivot_longer(df, any_of(rownames(sub)), names_to = \"gene\", values_to = \"expr\")\n\n\n\n\nCode\n# setup subtype groupings\nnames(tum) &lt;- tum &lt;- c(\"RCC\", \"LSCC\")\nnames(kid) &lt;- kid &lt;- c(\"Kidney\", \"RCC\")\nnames(lun) &lt;- lun &lt;- c(\"Alveoles\", \"LSCC\")\nnames(tls) &lt;- tls &lt;- c(\"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\")\n# split data by tumor type & TLS\ndat &lt;- c(list(all = sub,\n    RCC = sub[, sub$TumorType == \"RCC\"], \n    LSCC = sub[, sub$TumorType == \"LSCC\"]),\n    lapply(tls, \\(.) sub[, sub$TissueSub == .]))\n\n\n\n\nCode\nref &lt;- c(\n    all = unname(kid[1]),\n    RCC = unname(kid[1]), \n    LSCC = unname(lun[1]), \n    sapply(tls, \\(.) \"LSCC\"))\nnames(ids) &lt;- ids &lt;- names(dat)\ndat &lt;- dat[ids]; ref &lt;- ref[ids]\nfit &lt;- lapply(ids, \\(.) {\n    # setup design matrix\n    df &lt;- data.frame(colData(dat[[.]]))\n    if (. %in% tls) {\n        tt &lt;- factor(df$TumorType)\n        df$TumorType &lt;- relevel(tt, ref[.])\n        mm &lt;- model.matrix(~0+TumorType, df)\n        colnames(mm) &lt;- gsub(\"TumorType\", \"\", colnames(mm))\n    } else {\n        st &lt;- droplevels(df$TissueSub)\n        df$TissueSub &lt;- relevel(st, ref[.])\n        mm &lt;- model.matrix(~0+TissueSub, df)\n        colnames(mm) &lt;- gsub(\"TissueSub\", \"\", colnames(mm))\n    }\n    # fit GLM model\n    dgl &lt;- DGEList(assay(dat[[.]]))\n    dgl &lt;- calcNormFactors(dgl)\n    dgl &lt;- estimateDisp(dgl, mm)\n    fit &lt;- glmQLFit(dgl, mm)\n})\n\n\n\n\nCode\n# setup contrasts\ncs &lt;- c(list(\n    # within tumor types\n    RCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(kid, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(kid, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\"))),\n    LSCC = c(\n        # normal/tumor vs. any TLS\n        list(TLS = list(lun, tls)), \n        # normal/tumor vs. specific TLS\n        lapply(tls, \\(t) list(lun, t)),\n        # TLS maturation stages\n        list(\n            SFL = list(\"E_TLS\", \"SFL_TLS\"),\n            Tcell = list(\"E_TLS\", \"Tcell_TLS\")))),\n    # kidney/RCC vs. lung/LSCC\n    list(all = list(parenchyma = list(kid, lun))),\n    # across tumor types, within TLS subsets\n    lapply(tls, \\(.) setNames(list(\"RCC\"), .)))\ncs &lt;- lapply(ids, \\(.) {\n    x &lt;- numeric(ncol(mm &lt;- fit[[.]]$design))\n    lapply(cs[[.]], \\(c) {\n        if (length(c) == 1) {\n            i &lt;- match(c, colnames(mm))\n            x[i] &lt;- 1; x[-i] &lt;- -1\n        } else {\n            a &lt;- match(c[[1]], colnames(mm))\n            b &lt;- match(c[[2]], colnames(mm))\n            x[a] &lt;- -1/sum(a != 0)\n            x[b] &lt;- 1/sum(b != 0)\n        }\n        return(x)\n    })\n})\n\n\n\n\nCode\n# run DGE analysis\nres &lt;- lapply(ids, \\(.) {\n    lapply(names(cs[[.]]), \\(c) {\n        ht &lt;- glmQLFTest(fit[[.]], contrast = cs[[.]][[c]])\n        tt &lt;- topTags(ht, n = Inf)$table\n        data.frame(row.names = NULL,\n            gene = rownames(tt), tt,\n            contrast = c, subset = .)\n    }) |&gt; do.call(what = rbind)\n}) |&gt; do.call(what = rbind)\nrownames(res) &lt;- NULL"
  },
  {
    "objectID": "geo-02-differential.html#visualization",
    "href": "geo-02-differential.html#visualization",
    "title": "Differential",
    "section": "",
    "text": "Code\ndf &lt;- res[res$subset == \"all\", ]\n.volcano(df, title = \"parenchyma\", fdr = 0.05, lfc = 1) + \n    theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\nps &lt;- lapply(tum, \\(.) {\n    df &lt;- res[res$subset == . & res$contrast == \"TLS\", ]\n    .volcano(df, title = ., fdr = 1e-4, lfc = 1.25)\n})\nwrap_plots(ps, nrow = 1) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\nps &lt;- lapply(tls, \\(.) {\n    df &lt;- res[res$subset == . & grepl(\"TLS\", res$contrast), ]\n    .volcano(df, title = ., fdr = 1e-3, lfc = 0.5)\n})\nwrap_plots(ps, nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\nCode\ndf &lt;- res[res$contrast %in% c(\"SFL\", \"Tcell\"), ]\nps &lt;- lapply(unique(df$subset), \\(s) {\n    lapply(unique(df$contrast), \\(c) {\n        df &lt;- res[res$subset == s & res$contrast == c, ]\n        .volcano(df, fdr = 1e-4, lfc = 1.25, title = paste(s, c, sep = \",\"))\n    })\n})\nwrap_plots(Reduce(c, ps), nrow = 2) + \n  plot_layout(guides = \"collect\") &\n  theme(legend.position = \"top\")\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(FDR &lt; 0.05) %&gt;% \n    filter(subset == \"all\") %&gt;%\n    slice_max(abs(logFC), n = 80)\nmtx &lt;- logcounts(sub)[top$gene, sub$TissueSub %in% c(kid, lun)]\ncd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\nhm &lt;- pheatmap(mtx, \n    main = \"parenchyma\", fontsize = 6,\n    col = rev(hcl.colors(51, \"RdBu\")),\n    scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(!subset %in% tls) %&gt;%\n    group_by(subset) %&gt;%\n    filter(FDR &lt; 0.1, contrast == \"TLS\") %&gt;% \n    slice_max(abs(logFC), n = 40) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    mtx &lt;- logcounts(sub)[top[[.]]$gene, sub$TumorType == .]\n    cd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm &lt;- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    group_by(subset) %&gt;%\n    filter(contrast %in% c(\"SFL\", \"Tcell\")) %&gt;%\n    slice_max(abs(logFC), n = 40) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    idx &lt;- sub$TumorType == . & sub$TissueSub %in% c(\n        \"E_TLS\", paste0(unique(top[[.]]$contrast), \"_TLS\"))\n    mtx &lt;- logcounts(sub)[top[[.]]$gene, idx]\n    cd &lt;- data.frame(colData(sub))[c(\"TissueSub\")]\n    hm &lt;- pheatmap(mtx, \n        main = ., fontsize = 6,\n        col = rev(hcl.colors(51, \"RdBu\")),\n        scale = \"row\", show_colnames = FALSE, annotation_col = cd)\n    print(hm); cat(\"\\n\\n\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLSCCRCC\n\n\n\n\n\n\n\n\n\n\nCode\ntop &lt;- res %&gt;%\n    filter(subset %in% tls) %&gt;%\n    group_by(subset) %&gt;%\n    slice_max(abs(logFC), n = 25) %&gt;% \n    split(.$subset)\nfor (. in names(top)) {\n    cat(\"####\", ., \"\\n\")\n    plt &lt;- ggplot(\n        filter(gg, \n            TissueSub == .,\n            gene %in% top[[.]]$gene),\n        aes(TumorType, expr, fill = TumorType)) +\n        facet_wrap(~ gene, scales = \"free_y\") +\n        geom_boxplot(size = 0.1, fill = NA, outlier.color = NA, show.legend = FALSE) + \n        geom_beeswarm(shape = 21, col = \"black\", stroke = 0.1, size = 1.2, alpha = 0.8) + \n        guides(fill = guide_legend(override.aes = list(size = 3, alpha = 1))) +\n        labs(x = NULL, y = \"Expression (logCPM)\") +\n        scale_fill_brewer(palette = \"Set2\") +\n        theme_linedraw(9) + theme(\n            panel.grid = element_blank(),\n            axis.text.x = element_blank(),\n            axis.ticks.x = element_blank(),\n            strip.background = element_blank(),\n            legend.key.size = unit(0.5, \"lines\"),\n            strip.text = element_text(color = \"black\", face = \"bold\"))\n    print(plt); cat(\"\\n\\n\")\n}"
  },
  {
    "objectID": "geo-02-differential.html#appendix",
    "href": "geo-02-differential.html#appendix",
    "title": "Differential",
    "section": "",
    "text": "Code\nsaveRDS(res, file.path(\"..\", \"outs\", \"02-dge.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] EnhancedVolcano_1.18.0      ggrepel_0.9.3              \n [3] ggbeeswarm_0.7.2            patchwork_1.1.3            \n [5] pheatmap_1.0.12             scuttle_1.10.2             \n [7] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n [9] Biobase_2.60.0              GenomicRanges_1.52.0       \n[11] GenomeInfoDb_1.36.3         IRanges_2.34.1             \n[13] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[15] MatrixGenerics_1.12.3       matrixStats_1.0.0          \n[17] ggplot2_3.4.3               tidyr_1.3.0                \n[19] dplyr_1.1.3                 edgeR_3.42.4               \n[21] limma_3.56.2               \n\nloaded via a namespace (and not attached):\n [1] beeswarm_0.4.0            gtable_0.3.4             \n [3] xfun_0.40                 htmlwidgets_1.6.2        \n [5] lattice_0.22-5            Cairo_1.6-1              \n [7] vctrs_0.6.3               tools_4.3.2              \n [9] bitops_1.0-7              generics_0.1.3           \n[11] parallel_4.3.2            tibble_3.2.1             \n[13] fansi_1.0.4               pkgconfig_2.0.3          \n[15] Matrix_1.6-1              RColorBrewer_1.1-3       \n[17] sparseMatrixStats_1.12.2  lifecycle_1.0.3          \n[19] GenomeInfoDbData_1.2.10   farver_2.1.1             \n[21] compiler_4.3.2            munsell_0.5.0            \n[23] codetools_0.2-19          vipor_0.4.5              \n[25] htmltools_0.5.6           RCurl_1.98-1.12          \n[27] yaml_2.3.7                pillar_1.9.0             \n[29] crayon_1.5.2              BiocParallel_1.34.2      \n[31] DelayedArray_0.26.7       abind_1.4-5              \n[33] tidyselect_1.2.0          locfit_1.5-9.8           \n[35] digest_0.6.33             purrr_1.0.2              \n[37] labeling_0.4.3            splines_4.3.2            \n[39] fastmap_1.1.1             grid_4.3.2               \n[41] colorspace_2.1-0          cli_3.6.1                \n[43] magrittr_2.0.3            S4Arrays_1.0.6           \n[45] utf8_1.2.3                withr_2.5.1              \n[47] DelayedMatrixStats_1.22.6 scales_1.2.1             \n[49] rmarkdown_2.24            XVector_0.40.0           \n[51] beachmat_2.16.0           evaluate_0.21            \n[53] ggrastr_1.0.2             knitr_1.44               \n[55] rlang_1.1.1               Rcpp_1.0.11              \n[57] glue_1.6.2                rstudioapi_0.15.0        \n[59] jsonlite_1.8.7            R6_2.5.1                 \n[61] zlibbioc_1.46.0"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Contents",
    "section": "",
    "text": "Contents"
  },
  {
    "objectID": "geo-01-quality.html",
    "href": "geo-01-quality.html",
    "title": "Quality",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(scran)\nlibrary(scater)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\np &lt;- file.path(\"..\", \"data\", \"GeoMx\")\ny &lt;- read.csv(\n  file.path(p, \"counts.csv\"), \n  row.names = 1, check.names = FALSE)\nrd &lt;- read.csv(\n  file.path(p, \"rowmd.csv\"), \n  row.names = 1, check.names = FALSE)\ncd &lt;- read.csv(\n  file.path(p, \"colmd.csv\"), \n  row.names = 1, check.names = FALSE)\n\n\n\n\n\n\n\nCode\n# fix/simplify sample metadata\nnames(cd)[ncol(cd)] &lt;- \"LOQ\"\nnames(cd) &lt;- gsub(\"_ty\", \"_Ty\", names(cd))\nnames(cd) &lt;- gsub(\"_\", \"\", names(cd))\n# construct SCE\n(sce &lt;- SingleCellExperiment(\n  list(counts = as.matrix(y)),\n  rowData = rd, colData = cd))\n\n\nclass: SingleCellExperiment \ndim: 18677 322 \nmetadata(0):\nassays(1): counts\nrownames(18677): UBXN6 KTN1 ... CBLN2 ARPC5\nrowData names(12): HUGOSymbol TargetGroup ... NumberOfProbesTotal\n  GeneID\ncolnames(322): LSCC1_20210505 | 001 | immune LSCC1_20210505 | 002 |\n  immune ... RCC2_20210405 | 060 | Geometric Segment RCC2_20210405 |\n  061 | Geometric Segment\ncolData names(34): SlideName ScanLabel ... ScanOffsetY LOQ\nreducedDimNames(0):\nmainExpName: NULL\naltExpNames(0):\n\n\n\n\n\n\n\n\nCode\n# total positive/negative probe counts\nis_np &lt;- rowData(sce)$CodeClass == \"Negative\"\nsce$neg &lt;- colSums(counts(sce[ is_np, ]))\nsce$pos &lt;- colSums(counts(sce[!is_np, ]))\n# drop negative probes & outliers\nsce &lt;- sce[!is_np,\n    sce$neg &lt; 500 &\n    sce$RawReads &gt;= 100 &\n    sce$AOINucleiCount &gt;= 5]\n# drop LNmet (single sample) & TLSep\nsce &lt;- sce[, -grep(\"LNmet\", sce$TissueType)]\n# test whether or not features\n# lie above sample-specific LOQ\nloq &lt;- sweep(assay(sce), 2, sce$LOQ, `&gt;`)\n# keep samples with at least 5% of genes &gt; LOQ\ntable(cs &lt;- colMeans(loq) &gt;= 0.05)\n\n\n\nFALSE  TRUE \n   90   229 \n\n\nCode\nsce &lt;- sce[, cs]; loq &lt;- loq[, cs]\n# keep genes &gt; LOQ in at least\n# 10% of samples (by tumor type)\ngs &lt;- by(t(loq), sce$TumorType, \\(.)\n    colnames(.)[colMeans(.) &gt;= 0.1])\nsapply(gs, length)\n\n\nLSCC  RCC \n3295 3213 \n\n\nCode\ngs &lt;- unique(unlist(gs))\ndim(sce &lt;- sce[gs, ])\n\n\n[1] 3710  229\n\n\n\n\nCode\n# add broader subtype labels\nsce$TissueSub &lt;- sce$TissueSubtype\nsce$TissueSub[grep(\"^LN\", sce$TissueType)] &lt;- \"LN\"\nsce$TissueSub[grep(\"^SFL_TLS\", sce$TissueSubtype)] &lt;- \"SFL_TLS\"\n# reorder factors of interest\nsce$TissueType &lt;- factor(sce$TissueType, c(\n    \"TLS\", \"LN\", \"Alv\", \"Kid\", \"Tum\"))\nsce$TissueSub &lt;- factor(sce$TissueSub, c(\n    \"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\", \n    \"LN\", \"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\ncd &lt;- data.frame(colData(sce))\n\n\n\n\nCode\nggplot(cd, aes(RawReads, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(RawReads, AOINucleiCount, col = TissueType)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = TissueType)) +\n  plot_layout(nrow = 2, guides = \"collect\") & \n  scale_x_log10() & scale_y_log10() &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  theme_bw() & theme(\n      panel.grid.minor = element_blank(),\n      legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\nalv &lt;- cd$TissueType == \"Alv\"\nggplot(cd, aes(RawReads, col = SlideName)) +\nggplot(cd, aes(RawReads, col = PatientID)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueType)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueSubtype)) +\n  plot_layout(nrow = 2) &\n  geom_density(key_glyph = \"point\") & \n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  scale_x_log10() & theme_bw() & theme(\n    legend.justification = c(0, 0.5),\n    legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndgl &lt;- calcNormFactors(sce)\ny &lt;- cpm.DGEList(dgl, log = FALSE)\nz &lt;- cpm.DGEList(dgl, log = TRUE )\nassay(sce, \"normcounts\") &lt;- y\nassay(sce, \"logcounts\" ) &lt;- z\n\n\n\n\n\n\n\nCode\ntbl &lt;- modelGeneVar(sce, block = sce$PatientID)\nrowData(sce)$hvg &lt;- (hvg &lt;- tbl$bio &gt; 0)\n\n\n\n\n\n\n\nCode\nsce &lt;- runPCA(sce, subset_row = hvg)\ndr &lt;- reducedDim(sce)\ncd &lt;- data.frame(cd, dr)\n\n\n\n\n\n\n\n\n\n\nCode\nvar &lt;- c(\"AOINucleiCount\", \"AOISurfaceArea\", \"LOQ\", \"TumorType\", \n    \"TissueSub\", \"SlideName\", \"PatientID\", \"PatientCategory\") \n(pve &lt;- plotExplanatoryVariables(sce, variables = var))\n\n\n\n\n\n\n\n\n\ndiscretecontinuous\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = SlideName)) +\nggplot(cd, aes(PC1, PC2, col = TumorType)) +\nggplot(cd, aes(PC1, PC2, col = TissueType)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n    ncol = 2, title.position = \"top\",\n    override.aes = list(size = 3, alpha = 1))) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = RawReads)) +\nggplot(cd, aes(PC1, PC2, col = AOISurfaceArea)) +\nggplot(cd, aes(PC1, PC2, col = AOINucleiCount)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  scale_color_viridis_c(trans = \"log10\") &\n  guides(color = guide_colorbar(title.position = \"top\")) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.width = unit(2, \"lines\"),\n    legend.key.height = unit(0.5, \"lines\"))\n\n\n\n\n\n\n\n\n\n\n\n\nTissueTypeTissueSub\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(sce, file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] patchwork_1.1.3             scater_1.28.0              \n [3] ggplot2_3.4.3               scran_1.28.2               \n [5] scuttle_1.10.2              SingleCellExperiment_1.22.0\n [7] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.3        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[15] matrixStats_1.0.0           edgeR_3.42.4               \n[17] limma_3.56.2               \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0          viridisLite_0.4.2        \n [3] farver_2.1.1              dplyr_1.1.3              \n [5] vipor_0.4.5               viridis_0.6.4            \n [7] bitops_1.0-7              fastmap_1.1.1            \n [9] RCurl_1.98-1.12           bluster_1.10.0           \n[11] digest_0.6.33             rsvd_1.0.5               \n[13] lifecycle_1.0.3           cluster_2.1.5            \n[15] statmod_1.5.0             magrittr_2.0.3           \n[17] compiler_4.3.2            rlang_1.1.1              \n[19] tools_4.3.2               igraph_1.5.1             \n[21] utf8_1.2.3                yaml_2.3.7               \n[23] knitr_1.44                labeling_0.4.3           \n[25] S4Arrays_1.0.6            dqrng_0.3.1              \n[27] htmlwidgets_1.6.2         DelayedArray_0.26.7      \n[29] abind_1.4-5               BiocParallel_1.34.2      \n[31] withr_2.5.1               grid_4.3.2               \n[33] fansi_1.0.4               beachmat_2.16.0          \n[35] colorspace_2.1-0          scales_1.2.1             \n[37] cli_3.6.1                 rmarkdown_2.24           \n[39] crayon_1.5.2              generics_0.1.3           \n[41] metapod_1.8.0             rstudioapi_0.15.0        \n[43] DelayedMatrixStats_1.22.6 ggbeeswarm_0.7.2         \n[45] zlibbioc_1.46.0           parallel_4.3.2           \n[47] XVector_0.40.0            vctrs_0.6.3              \n[49] Matrix_1.6-1              jsonlite_1.8.7           \n[51] BiocSingular_1.16.0       BiocNeighbors_1.18.0     \n[53] ggrepel_0.9.3             irlba_2.3.5.1            \n[55] beeswarm_0.4.0            locfit_1.5-9.8           \n[57] glue_1.6.2                codetools_0.2-19         \n[59] cowplot_1.1.1             gtable_0.3.4             \n[61] ScaledMatrix_1.8.1        munsell_0.5.0            \n[63] tibble_3.2.1              pillar_1.9.0             \n[65] htmltools_0.5.6           GenomeInfoDbData_1.2.10  \n[67] R6_2.5.1                  sparseMatrixStats_1.12.2 \n[69] evaluate_0.21             lattice_0.22-5           \n[71] Rcpp_1.0.11               gridExtra_2.3            \n[73] xfun_0.40                 pkgconfig_2.0.3"
  },
  {
    "objectID": "geo-01-quality.html#preamble",
    "href": "geo-01-quality.html#preamble",
    "title": "Quality",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(scran)\nlibrary(scater)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(SingleCellExperiment)\n\n\n\n\n\n\n\nCode\np &lt;- file.path(\"..\", \"data\", \"GeoMx\")\ny &lt;- read.csv(\n  file.path(p, \"counts.csv\"), \n  row.names = 1, check.names = FALSE)\nrd &lt;- read.csv(\n  file.path(p, \"rowmd.csv\"), \n  row.names = 1, check.names = FALSE)\ncd &lt;- read.csv(\n  file.path(p, \"colmd.csv\"), \n  row.names = 1, check.names = FALSE)\n\n\n\n\n\n\n\nCode\n# fix/simplify sample metadata\nnames(cd)[ncol(cd)] &lt;- \"LOQ\"\nnames(cd) &lt;- gsub(\"_ty\", \"_Ty\", names(cd))\nnames(cd) &lt;- gsub(\"_\", \"\", names(cd))\n# construct SCE\n(sce &lt;- SingleCellExperiment(\n  list(counts = as.matrix(y)),\n  rowData = rd, colData = cd))\n\n\nclass: SingleCellExperiment \ndim: 18677 322 \nmetadata(0):\nassays(1): counts\nrownames(18677): UBXN6 KTN1 ... CBLN2 ARPC5\nrowData names(12): HUGOSymbol TargetGroup ... NumberOfProbesTotal\n  GeneID\ncolnames(322): LSCC1_20210505 | 001 | immune LSCC1_20210505 | 002 |\n  immune ... RCC2_20210405 | 060 | Geometric Segment RCC2_20210405 |\n  061 | Geometric Segment\ncolData names(34): SlideName ScanLabel ... ScanOffsetY LOQ\nreducedDimNames(0):\nmainExpName: NULL\naltExpNames(0):"
  },
  {
    "objectID": "geo-01-quality.html#filtering",
    "href": "geo-01-quality.html#filtering",
    "title": "Quality",
    "section": "",
    "text": "Code\n# total positive/negative probe counts\nis_np &lt;- rowData(sce)$CodeClass == \"Negative\"\nsce$neg &lt;- colSums(counts(sce[ is_np, ]))\nsce$pos &lt;- colSums(counts(sce[!is_np, ]))\n# drop negative probes & outliers\nsce &lt;- sce[!is_np,\n    sce$neg &lt; 500 &\n    sce$RawReads &gt;= 100 &\n    sce$AOINucleiCount &gt;= 5]\n# drop LNmet (single sample) & TLSep\nsce &lt;- sce[, -grep(\"LNmet\", sce$TissueType)]\n# test whether or not features\n# lie above sample-specific LOQ\nloq &lt;- sweep(assay(sce), 2, sce$LOQ, `&gt;`)\n# keep samples with at least 5% of genes &gt; LOQ\ntable(cs &lt;- colMeans(loq) &gt;= 0.05)\n\n\n\nFALSE  TRUE \n   90   229 \n\n\nCode\nsce &lt;- sce[, cs]; loq &lt;- loq[, cs]\n# keep genes &gt; LOQ in at least\n# 10% of samples (by tumor type)\ngs &lt;- by(t(loq), sce$TumorType, \\(.)\n    colnames(.)[colMeans(.) &gt;= 0.1])\nsapply(gs, length)\n\n\nLSCC  RCC \n3295 3213 \n\n\nCode\ngs &lt;- unique(unlist(gs))\ndim(sce &lt;- sce[gs, ])\n\n\n[1] 3710  229\n\n\n\n\nCode\n# add broader subtype labels\nsce$TissueSub &lt;- sce$TissueSubtype\nsce$TissueSub[grep(\"^LN\", sce$TissueType)] &lt;- \"LN\"\nsce$TissueSub[grep(\"^SFL_TLS\", sce$TissueSubtype)] &lt;- \"SFL_TLS\"\n# reorder factors of interest\nsce$TissueType &lt;- factor(sce$TissueType, c(\n    \"TLS\", \"LN\", \"Alv\", \"Kid\", \"Tum\"))\nsce$TissueSub &lt;- factor(sce$TissueSub, c(\n    \"E_TLS\", \"SFL_TLS\", \"PFL_TLS\", \"Tcell_TLS\", \n    \"LN\", \"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\ncd &lt;- data.frame(colData(sce))\n\n\n\n\nCode\nggplot(cd, aes(RawReads, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = SlideName)) +\nggplot(cd, aes(RawReads, AOINucleiCount, col = TissueType)) +\nggplot(cd, aes(AOISurfaceArea, AOINucleiCount, col = TissueType)) +\n  plot_layout(nrow = 2, guides = \"collect\") & \n  scale_x_log10() & scale_y_log10() &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  theme_bw() & theme(\n      panel.grid.minor = element_blank(),\n      legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\nalv &lt;- cd$TissueType == \"Alv\"\nggplot(cd, aes(RawReads, col = SlideName)) +\nggplot(cd, aes(RawReads, col = PatientID)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueType)) +\nggplot(cd[!alv, ], aes(RawReads, col = TissueSubtype)) +\n  plot_layout(nrow = 2) &\n  geom_density(key_glyph = \"point\") & \n  guides(color = guide_legend(\n      override.aes = list(size = 3, alpha = 1))) &\n  scale_x_log10() & theme_bw() & theme(\n    legend.justification = c(0, 0.5),\n    legend.key.size = unit(0.5, \"lines\"))"
  },
  {
    "objectID": "geo-01-quality.html#processing",
    "href": "geo-01-quality.html#processing",
    "title": "Quality",
    "section": "",
    "text": "Code\ndgl &lt;- calcNormFactors(sce)\ny &lt;- cpm.DGEList(dgl, log = FALSE)\nz &lt;- cpm.DGEList(dgl, log = TRUE )\nassay(sce, \"normcounts\") &lt;- y\nassay(sce, \"logcounts\" ) &lt;- z\n\n\n\n\n\n\n\nCode\ntbl &lt;- modelGeneVar(sce, block = sce$PatientID)\nrowData(sce)$hvg &lt;- (hvg &lt;- tbl$bio &gt; 0)\n\n\n\n\n\n\n\nCode\nsce &lt;- runPCA(sce, subset_row = hvg)\ndr &lt;- reducedDim(sce)\ncd &lt;- data.frame(cd, dr)"
  },
  {
    "objectID": "geo-01-quality.html#visualization",
    "href": "geo-01-quality.html#visualization",
    "title": "Quality",
    "section": "",
    "text": "Code\nvar &lt;- c(\"AOINucleiCount\", \"AOISurfaceArea\", \"LOQ\", \"TumorType\", \n    \"TissueSub\", \"SlideName\", \"PatientID\", \"PatientCategory\") \n(pve &lt;- plotExplanatoryVariables(sce, variables = var))\n\n\n\n\n\n\n\n\n\ndiscretecontinuous\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = SlideName)) +\nggplot(cd, aes(PC1, PC2, col = TumorType)) +\nggplot(cd, aes(PC1, PC2, col = TissueType)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  guides(color = guide_legend(\n    ncol = 2, title.position = \"top\",\n    override.aes = list(size = 3, alpha = 1))) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(PC1, PC2, col = RawReads)) +\nggplot(cd, aes(PC1, PC2, col = AOISurfaceArea)) +\nggplot(cd, aes(PC1, PC2, col = AOINucleiCount)) &\n  geom_point(shape = 16, alpha = 0.5) &\n  scale_color_viridis_c(trans = \"log10\") &\n  guides(color = guide_colorbar(title.position = \"top\")) &\n  coord_equal() & theme_bw() & theme(\n    legend.position = \"bottom\", \n    legend.justification = \"top\",\n    legend.key.width = unit(2, \"lines\"),\n    legend.key.height = unit(0.5, \"lines\"))\n\n\n\n\n\n\n\n\n\n\n\n\nTissueTypeTissueSub"
  },
  {
    "objectID": "geo-01-quality.html#appendix",
    "href": "geo-01-quality.html#appendix",
    "title": "Quality",
    "section": "",
    "text": "Code\nsaveRDS(sce, file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] patchwork_1.1.3             scater_1.28.0              \n [3] ggplot2_3.4.3               scran_1.28.2               \n [5] scuttle_1.10.2              SingleCellExperiment_1.22.0\n [7] SummarizedExperiment_1.30.2 Biobase_2.60.0             \n [9] GenomicRanges_1.52.0        GenomeInfoDb_1.36.3        \n[11] IRanges_2.34.1              S4Vectors_0.38.1           \n[13] BiocGenerics_0.46.0         MatrixGenerics_1.12.3      \n[15] matrixStats_1.0.0           edgeR_3.42.4               \n[17] limma_3.56.2               \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.0          viridisLite_0.4.2        \n [3] farver_2.1.1              dplyr_1.1.3              \n [5] vipor_0.4.5               viridis_0.6.4            \n [7] bitops_1.0-7              fastmap_1.1.1            \n [9] RCurl_1.98-1.12           bluster_1.10.0           \n[11] digest_0.6.33             rsvd_1.0.5               \n[13] lifecycle_1.0.3           cluster_2.1.5            \n[15] statmod_1.5.0             magrittr_2.0.3           \n[17] compiler_4.3.2            rlang_1.1.1              \n[19] tools_4.3.2               igraph_1.5.1             \n[21] utf8_1.2.3                yaml_2.3.7               \n[23] knitr_1.44                labeling_0.4.3           \n[25] S4Arrays_1.0.6            dqrng_0.3.1              \n[27] htmlwidgets_1.6.2         DelayedArray_0.26.7      \n[29] abind_1.4-5               BiocParallel_1.34.2      \n[31] withr_2.5.1               grid_4.3.2               \n[33] fansi_1.0.4               beachmat_2.16.0          \n[35] colorspace_2.1-0          scales_1.2.1             \n[37] cli_3.6.1                 rmarkdown_2.24           \n[39] crayon_1.5.2              generics_0.1.3           \n[41] metapod_1.8.0             rstudioapi_0.15.0        \n[43] DelayedMatrixStats_1.22.6 ggbeeswarm_0.7.2         \n[45] zlibbioc_1.46.0           parallel_4.3.2           \n[47] XVector_0.40.0            vctrs_0.6.3              \n[49] Matrix_1.6-1              jsonlite_1.8.7           \n[51] BiocSingular_1.16.0       BiocNeighbors_1.18.0     \n[53] ggrepel_0.9.3             irlba_2.3.5.1            \n[55] beeswarm_0.4.0            locfit_1.5-9.8           \n[57] glue_1.6.2                codetools_0.2-19         \n[59] cowplot_1.1.1             gtable_0.3.4             \n[61] ScaledMatrix_1.8.1        munsell_0.5.0            \n[63] tibble_3.2.1              pillar_1.9.0             \n[65] htmltools_0.5.6           GenomeInfoDbData_1.2.10  \n[67] R6_2.5.1                  sparseMatrixStats_1.12.2 \n[69] evaluate_0.21             lattice_0.22-5           \n[71] Rcpp_1.0.11               gridExtra_2.3            \n[73] xfun_0.40                 pkgconfig_2.0.3"
  },
  {
    "objectID": "geo-03-differential-two-model.html",
    "href": "geo-03-differential-two-model.html",
    "title": "Different DE models",
    "section": "",
    "text": "Compare differential expression in one model instead of separated model."
  },
  {
    "objectID": "geo-03-differential-two-model.html#differential-exression",
    "href": "geo-03-differential-two-model.html#differential-exression",
    "title": "Different DE models",
    "section": "",
    "text": "Compare differential expression in one model instead of separated model."
  },
  {
    "objectID": "geo-03-differential-two-model.html#preamble",
    "href": "geo-03-differential-two-model.html#preamble",
    "title": "Different DE models",
    "section": "Preamble",
    "text": "Preamble\n\n\nCode\noptions(ggrepel.max.overlaps = Inf)\n\n.volcano &lt;- function(data, name1, name2, fdr=0.1, lfc=2, one_sided=FALSE,\n                     fdr_label=fdr, lfc_label=lfc){\n  \n  data$expression = ifelse(data$FDR &lt; fdr_label & data$logFC &gt;= lfc_label, 'Up',\n                     ifelse(data$FDR &lt; fdr_label & data$logFC &lt;= -lfc_label ,'Down', 'Stable')\n                     )\n  data$gene &lt;- rownames(data)\n  if (one_sided){\n    DEGs &lt;- subset(data, expression ==\"Up\")\n    xaxis &lt;- c(0,NA)\n  }else{\n    DEGs &lt;- subset(data, expression %in% c(\"Up\", \"Down\"))\n    xaxis &lt;- c(min(data[[\"logFC\"]], na.rm = TRUE) - 1.5, max(data[[\"logFC\"]], na.rm = TRUE) +\n    1.5)\n  }\n  significant &lt;- rownames(DEGs)\n  keyvals.colour &lt;- ifelse(data$logFC &lt; -lfc & data$FDR &lt; fdr, \"#662965\",\n                    ifelse(data$logFC &gt; lfc & data$FDR &lt; fdr,\"gold1\",\n                      ifelse(data$FDR &gt;= fdr,\"#8F8F8F\",\"steelblue4\"\n                      )))\n  names(keyvals.colour)[keyvals.colour == \"#662965\"] &lt;- paste0('Up in ', name1)\n  names(keyvals.colour)[keyvals.colour == \"gold1\"] &lt;- paste0('Up in ', name2)\n  names(keyvals.colour)[keyvals.colour == \"steelblue4\"] &lt;- 'Low FC'\n  names(keyvals.colour)[keyvals.colour == '#8F8F8F'] &lt;- 'NS'\n  \n  EnhancedVolcano(data,\n    x = \"logFC\", y = \"FDR\",\n    FCcutoff = lfc, pCutoff = fdr,\n    pointSize = 1, raster = TRUE,\n    title = NULL, subtitle = NULL,\n    lab = data[[\"gene\"]], labSize = 2,\n    selectLab = rownames(DEGs),\n    xlim = xaxis,\n    ylim = c(0,NA),\n    xlab = bquote(~Log[2]~ 'FC'),\n    ylab = bquote(\"-\"~Log[10]~ 'adj. p-val'),\n    colCustom = keyvals.colour,\n    maxoverlapsConnectors = Inf,\n    drawConnectors = TRUE, widthConnectors = 0.25) +\n  guides(col = guide_legend(override.aes = list(alpha = 1, size = 3))) +\n  theme_bw(9) +\n    theme(#aspect.ratio = 1,\n          legend.title = element_blank(),\n          legend.position = \"top\",\n          panel.grid.minor = element_blank())\n}\n\n\n\nDependencies\n\n\nCode\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(edgeR)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(EnhancedVolcano)\nlibrary(cowplot)\nlibrary(SingleCellExperiment)\nlibrary(ExploreModelMatrix)\nlibrary(ggrepel)\n\n\n\n\nLoading\n\n\nCode\nsce &lt;- readRDS(file.path(\"..\", \"outs\", \"01-sce.rds\"))\n\n#sce_sub &lt;- sce[,!sce$TissueSub %in% \"LN\"]\nsce_sub &lt;- sce\nsce_sub$Origin &lt;- sce_sub$TissueSub |&gt; forcats::fct_collapse(\n  \"parenchymal\" = c(\"Alveoles\", \"Kidney\", \"LSCC\", \"RCC\"))\nsce_sub$Origin &lt;- sce_sub$Origin |&gt; droplevels()\nsce_sub$Origin &lt;- relevel(sce_sub$Origin, ref=\"parenchymal\")\n\n# To compare TLS in general\nsce_sub$Origin_gen &lt;- sce_sub$Origin |&gt; forcats::fct_collapse(\n  \"TLS\" = c(\"E_TLS\",\"SFL_TLS\",\"PFL_TLS\",\"Tcell_TLS\"))\nsce_sub$Origin_gen &lt;- sce_sub$Origin_gen |&gt; droplevels()\nsce_sub$Origin_gen &lt;- relevel(sce_sub$Origin_gen, ref=\"parenchymal\")\n\n# Set up nested design matrix\n# Add a new column mixing patient and group variable\nsce_sub$PatTum &lt;- paste0(sce_sub$PatientID, \"_\", sce_sub$TumorType)\nsce_sub$PatTum &lt;- sce_sub$PatTum |&gt; forcats::fct_collapse(\n  \"1\" = c(\"16690_LSCC\", \"r15660_RCC\"),\n  \"2\" = c(\"17776_LSCC\", \"r18773_RCC\"),\n  \"3\" = c(\"24136_LSCC\", \"r19101_RCC\"),\n  \"4\" = c(\"32288_LSCC\", \"r24784_RCC\"),\n  \"5\" = c(\"38234_LSCC\", \"r30616_RCC\"),\n  \"6\" = c(\"39160_LSCC\", \"r8527_RCC\"))\n\ndf &lt;- data.frame(colData(sce_sub))"
  },
  {
    "objectID": "geo-03-differential-two-model.html#multilevel-design-model",
    "href": "geo-03-differential-two-model.html#multilevel-design-model",
    "title": "Different DE models",
    "section": "Multilevel design Model",
    "text": "Multilevel design Model\nWe have an experiment with repeated measures (multiple measurements per Patient) and different sample locations (TLS type, parenchymal) as well as different tumor types (LSCC,RCC). To address this we fit different model:\n\na model to find tumor specific differences between sample origins (TLS/parenchyma etc) while accounting for patientID: ~ TumorType + PatTum:TumorType + TumorType:Origin.\na model to compare sample origins between tumor types not accounting for PatientID (see here): ~  TumorType:Origin.\n\n\nModel1: Multilevel design model with patients\n\nDesign\n\n\nCode\ndesign1 &lt;- model.matrix(~ TumorType + TumorType:PatTum + TumorType:Origin, df)\ndesign1 &lt;- design1[,-which(colnames(design1) %in% \"TumorTypeRCC:OriginLN\")]\n\n\nvd &lt;- VisualizeDesign(sampleData = df[, c( \"TumorType\", \"Origin\", \"PatTum\")],\n                      designMatrix = design1, \n                      flipCoordFitted = TRUE)\ncowplot::plot_grid(plotlist = vd$plotlist, ncol = 1)\n\n\n\n\n\nCode\n# fit deseq2 GLM model\ndgl1 &lt;- DGEList(counts(sce_sub))\nkeep &lt;- filterByExpr(dgl1, design1)\ndgl1 &lt;- dgl1[keep, , keep.lib.sizes=FALSE]\ndgl1 &lt;- calcNormFactors(dgl1)\ndgl1 &lt;- estimateDisp(dgl1, design1, robust=TRUE)\nfit1 &lt;- glmQLFit(dgl1, design1, robust=TRUE)\n\n\n\n\nContrasts\n\n\nCode\ncolnames(design1) &lt;- gsub(\":\", \"_\", colnames(design1))\n\n# Define different contrasts\ncontrast_mod1 &lt;- makeContrasts(\n  ETLS_vs_par_inLSCC = TumorTypeLSCC_OriginE_TLS,\n  ETLS_vs_par_inRCC = TumorTypeRCC_OriginE_TLS,\n  SFL_TLS_vs_par_inLSCC = TumorTypeLSCC_OriginSFL_TLS,\n  SFL_TLS_vs_par_inRCC = TumorTypeRCC_OriginSFL_TLS,\n  PFL_TLS_vs_par_inLSCC = TumorTypeLSCC_OriginPFL_TLS,\n  PFL_TLS_vs_par_inRCC = TumorTypeRCC_OriginPFL_TLS,\n  Tcell_TLS_vs_par_inLSCC = TumorTypeLSCC_OriginTcell_TLS,\n  Tcell_TLS_vs_par_inRCC = TumorTypeRCC_OriginTcell_TLS,\n  ETLS_vs_SFTLS_inLSCC = TumorTypeLSCC_OriginE_TLS - TumorTypeLSCC_OriginSFL_TLS,\n  ETLS_vs_SFTLS_inRCC = TumorTypeRCC_OriginE_TLS - TumorTypeRCC_OriginSFL_TLS,\n  levels=design1)\n\n\n\n\nDE test and results\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCPFL_TLS_vs_par_inLSCCPFL_TLS_vs_par_inRCCTcell_TLS_vs_par_inLSCCTcell_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVolcano plots\n\nETLS_vs_par_inLSCCETLS_vs_par_inRCCSFL_TLS_vs_par_inLSCCSFL_TLS_vs_par_inRCCPFL_TLS_vs_par_inLSCCPFL_TLS_vs_par_inRCCTcell_TLS_vs_par_inLSCCTcell_TLS_vs_par_inRCCETLS_vs_SFTLS_inLSCCETLS_vs_SFTLS_inRCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nModel2: Interaction model without patients\nModel to identify TLS-specific differences between tumor types (RCC vs LSCC). As patient ID and group are convoluted the patient information is skipped in this model. Instead the model considers an interaction term of the sample origin (TLS stage/parenchyma) and the tumor type.\n\nDesign\n\n\nCode\nsce_sub2 &lt;- sce_sub[,!sce_sub$Origin %in% \"LN\"]\nsce_sub2$Origin &lt;- sce_sub2$Origin |&gt; droplevels()\nsce_sub2$Origin_gen &lt;- sce_sub2$Origin_gen |&gt; droplevels()\ndf2 &lt;- df |&gt; filter(!Origin %in% \"LN\")\ndf2$Origin &lt;- df2$Origin |&gt; droplevels()\ndf2$Origin_gen &lt;- df2$Origin_gen |&gt; droplevels()\ndesign2 &lt;- model.matrix(~ 0 + TumorType:Origin, df2)\n\n\nvd &lt;- VisualizeDesign(sampleData = df2[, c( \"TumorType\", \"Origin\")],\n                      designMatrix = design2, \n                      flipCoordFitted = TRUE)\ncowplot::plot_grid(plotlist = vd$plotlist, ncol = 1)\n\n\n\n\n\nCode\n# fit deseq2 GLM model\ndgl2 &lt;- DGEList(counts(sce_sub2))\nkeep &lt;- filterByExpr(dgl2, design1)\ndgl2 &lt;- dgl2[keep, , keep.lib.sizes=FALSE]\ndgl2 &lt;- calcNormFactors(dgl2)\ndgl2 &lt;- estimateDisp(dgl2, design2, robust=TRUE)\nfit2 &lt;- glmQLFit(dgl2, design2, robust=TRUE)\n\n\n\n\nContrasts\n\n\nCode\ncolnames(design2) &lt;- gsub(\":\", \"_\", colnames(design2))\n\n# Define different contrasts\ncontrast_mod2 &lt;- makeContrasts(\n  ETLS_inRCC_vs_LSCC = TumorTypeRCC_OriginE_TLS - TumorTypeLSCC_OriginE_TLS,\n  SFL_TLS_inRCC_vs_LSCC = TumorTypeRCC_OriginSFL_TLS - TumorTypeLSCC_OriginSFL_TLS,\n  PFL_TLS_inRCC_vs_LSCC = TumorTypeRCC_OriginPFL_TLS - TumorTypeLSCC_OriginPFL_TLS,\n  Tcell_TLS_inRCC_vs_LSCC = TumorTypeRCC_OriginTcell_TLS - TumorTypeLSCC_OriginTcell_TLS,\n  par_inRCC_vs_LSCC = TumorTypeRCC_Originparenchymal-TumorTypeLSCC_Originparenchymal,allTLS_inRCC_vs_LSCC = (TumorTypeRCC_OriginE_TLS + TumorTypeRCC_OriginSFL_TLS + TumorTypeRCC_OriginPFL_TLS + TumorTypeRCC_OriginTcell_TLS)/4 - (TumorTypeLSCC_OriginE_TLS + TumorTypeLSCC_OriginSFL_TLS + TumorTypeLSCC_OriginPFL_TLS + TumorTypeLSCC_OriginTcell_TLS)/4,\n  levels=design2)\n\n\n\n\nDE test and results\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCPFL_TLS_inRCC_vs_LSCCTcell_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVolcano plots\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCPFL_TLS_inRCC_vs_LSCCTcell_TLS_inRCC_vs_LSCCpar_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLogFC compare TLS vs parenchymal\n\n\nCode\nres_mod2 &lt;- lapply(res_mod2, function(res_tab){\n  res_tab$gene &lt;- rownames(res_tab)\n  res_tab\n})\n\nlog_FC_tab &lt;- res_mod2 |&gt; bind_rows(.id = \"contrast\")\n\n# Function for signficance thresholds\ncase_sig &lt;- function(FDR1, FDR2, com1, com2, FDR_t){\n  case_when(\n  FDR1 &lt;= FDR_t & !! FDR2 &lt;= FDR_t ~ \"both\",\n  FDR1 &lt;= FDR_t & !! FDR2 &gt; FDR_t ~ com1,\n  FDR1 &gt; FDR_t & !! FDR2 &lt;= FDR_t ~ com2,\n  FDR1 &gt; FDR_t & !! FDR2 &gt; FDR_t ~ \"none\"\n)\n}\n\n## plotting function\nlogFC_plot &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1,\n                       logFC_both = 0.5){\n  # subset dataframe\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR))\n  \n  # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  # Add to res list\n  res_nam &lt;- paste0(comp1, \"_\", comp2)\n  \n  # Add genes to highlight\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    highlight = case_when(\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        abs(!!sym(logFC_comp1)) &gt; logFC_both ~ gene,\n      .default = \"\"\n      )\n    ) \n  # plot limits\n  max_lim1 &lt;- max(abs(min(log_FC_sub[,logFC_comp1])), \n                  max(log_FC_sub[,logFC_comp1]))\n  max_lim2 &lt;- max(abs(min(log_FC_sub[,logFC_comp2])), \n                  max(log_FC_sub[,logFC_comp2]))\n  \n  # colors\n  color_pal &lt;- c(\"grey\",\"#fdb462\", \"#ff6666\",\"#0099cc\")\n  names(color_pal) &lt;- c(\"none\", \"both\", comp1, comp2)\n  \n  # plot\n  p &lt;- ggplot(log_FC_sub, aes_string(x=logFC_comp1, \n                       y=logFC_comp2)) + \n    geom_point(aes(colour = sig), size = 0.9, alpha = 0.7) +\n    xlim(-max_lim1, max_lim1) +\n    ylim(-max_lim2, max_lim2) +\n    geom_vline(xintercept = 0) +\n    geom_hline(yintercept = 0) + \n    scale_color_manual(values = color_pal) + \n    theme_bw()\n  \n  # annotations\n  p + geom_text_repel(\n    aes(label = highlight),\n    family = \"Poppins\",\n    size = 2,\n    min.segment.length = 0, \n    seed = 42, \n    box.padding = 0.5,\n    max.overlaps = Inf,\n    arrow = arrow(length = unit(0.005, \"npc\")),\n    nudge_x = .15,\n    nudge_y = .5,\n    color = \"#3D3D3D\"\n  )\n}\n\n\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCPFL_TLS_inRCC_vs_LSCCTcell_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelect DE genes\nTo select TLS-specific DE genes specific to each tumor type we use results from model2. Results are then filtered for genes that are also significant in the parenchymal comparison of the tumor (excluded), if the genes were not shown to be specific to TLS maturation by showing significant differences in model1 comparisons (both_TLS). Genes only significant in the non parenchymal comparison of model2 (sig_TLS) and those significant in the TLS-spcific and parenchymal comparison of the tumor showing an opposite effect (opposite) were selected.\n\n\nCode\nsel_TLS &lt;- function(res, pat, fdr){\n  pat_nam &lt;- grep(pat, names(res), value = T)\n  pat_nam &lt;- grep(\"par\", pat_nam, value = T)\n  sub_res &lt;- lapply(pat_nam, function(nam){\n    res_sel &lt;- res[[nam]] |&gt; filter(logFC &gt; 0 & FDR &lt; fdr)\n    res_sel$gene &lt;- rownames(res_sel)\n    data.frame(res_sel)\n  }) |&gt; bind_rows(.id = \"comp\")\n}\n\nTLS_RCC &lt;- sel_TLS(res_mod1, \"RCC\", fdr = 0.05)\nTLS_RCC_gene &lt;- unique(TLS_RCC$gene)\nwrite.csv(TLS_RCC_gene, paste0(\"../outs/TLS_RCC_genes.csv\"))\n\nTLS_LSCC &lt;- sel_TLS(res_mod1, \"LSCC\", fdr = 0.05)\nTLS_LSCC_gene &lt;- unique(TLS_LSCC$gene)\nwrite.csv(TLS_LSCC_gene, paste0(\"../outs/TLS_LSCC_genes.csv\"))\n\n# General exclusion list\n# Genes sig DE in parenchymal comparison, but not sig in tumor-specific TLS maturation\npar_res &lt;- res_mod2[[\"par_inRCC_vs_LSCC\"]] |&gt; \n  filter(FDR &lt; 0.05) |&gt; \n  data.frame()\npar_res$gene &lt;- rownames(par_res)\n\nexclude &lt;- par_res[!par_res$gene %in% c(TLS_RCC_gene, TLS_LSCC_gene),]\nwrite.csv(exclude, paste0(\"../outs/excluded_parenchymal_genes.csv\"))\n\nsel_genes &lt;- function(comp1, \n                       comp2, \n                       FDR_t = 0.1){\n  log_FC_sub &lt;- log_FC_tab |&gt; \n    dplyr::filter(contrast %in% c(comp1, comp2)) |&gt; \n    select(c(logFC,FDR,gene, F,contrast)) |&gt; \n    pivot_wider(names_from = contrast, \n                values_from = c(logFC, FDR, F))\n  \n   # new colum names\n  logFC_comp1 &lt;- grep(paste0(\"logFC_\", comp1), colnames(log_FC_sub), value = T)\n  logFC_comp2 &lt;- grep(paste0(\"logFC_\", comp2), colnames(log_FC_sub), value = T)\n  FDR_comp1 &lt;- grep(paste0(\"FDR_\", comp1), colnames(log_FC_sub), value = T)\n  FDR_comp2 &lt;- grep(paste0(\"FDR_\", comp2), colnames(log_FC_sub), value = T)\n  \n  # Add sig threshold\n  log_FC_sub &lt;- log_FC_sub |&gt; \n    mutate(sig = case_sig(FDR1 = !!sym(FDR_comp1), \n                          FDR2 = !!sym(FDR_comp2), \n                          com1 = comp1, \n                          com2 = comp2, \n                          FDR_t = FDR_t))\n  \n  \n   # Genes to exclude\n  log_FC_sub &lt;- log_FC_sub |&gt; mutate(\n    selected = case_when(\n      # exclude all sig in both & same sign & not in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        !gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"exclude\",\n      # include sig in both & same sign & in TLS list\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) == sign(!!sym(logFC_comp2)) &\n        gene %in% c(TLS_LSCC_gene, TLS_RCC_gene) ~ \"both_TLS\",\n      # sig all sig in TLS only\n      sig %in% comp1 ~ \"sig_TLS\",\n      sig %in% c(\"both\") & \n        sign(!!sym(logFC_comp1)) != sign(!!sym(logFC_comp2)) ~ \"opposite\",\n      .default = \"none\"\n      )\n    )\n  par_nam &lt;- grep(\"_par_\", colnames(log_FC_sub))\n  log_FC_sub &lt;- log_FC_sub |&gt; select(-par_nam)\n  }\n\n\n\nSelected results\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCPFL_TLS_inRCC_vs_LSCCTcell_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSummaries\n\nETLS_inRCC_vs_LSCCSFL_TLS_inRCC_vs_LSCCPFL_TLS_inRCC_vs_LSCCTcell_TLS_inRCC_vs_LSCCallTLS_inRCC_vs_LSCC"
  },
  {
    "objectID": "vis-01-quality.html",
    "href": "vis-01-quality.html",
    "title": "Quality",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(scran)\nlibrary(scater)\nlibrary(Matrix)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(RColorBrewer)\nlibrary(SpatialExperiment)\n\n\n\n\n\n\n\nCode\ndir &lt;- file.path(\"..\", \"data\", \"Visium\")\nids &lt;- list.dirs(dir, recursive = FALSE)\nids &lt;- ids[grep(\"^B[0-9]+\", basename(ids))]\nnames(ids) &lt;- gsub(\"_[0-9]*$\", \"\", basename(ids))\nspe &lt;- read10xVisium(ids, type = \"HDF5\", images = \"lowres\")\n# make barcodes/spot identifiers unique\nspe$barcode &lt;- colnames(spe); colnames(spe) &lt;- \n    paste(spe$sample_id, spe$barcode, sep = \".\")\n# sparsify counts\ny &lt;- as.matrix(assay(spe))\ny &lt;- as(y, \"dgCMatrix\")\nassay(spe) &lt;- y\n\n\n\n\nCode\nmd &lt;- read.csv(file.path(dir, \"metadata\", \"md.csv\"))\nmd &lt;- md[!is.na(md$Used.for.10x), ]\nmd$sample_id &lt;- gsub(\"-\", \"_\", md$B.number)\nidx &lt;- match(spe$sample_id, md$sample_id)\ntable(spe$TumorType &lt;- factor(md$Tumor.type[idx]))\n\n\n\nccRCC  LSCC  LUAD \n 9564 16010  2158 \n\n\n\n\nCode\ncsv1 &lt;- file.path(dir, \"metadata\", \"labels_all.csv\")\ncsv2 &lt;- file.path(dir, \"metadata\", \"labels_tls.csv\")\nlab1 &lt;- read.csv(csv1, row.names = 1)\nlab2 &lt;- read.csv(csv2, row.names = 1)\nlab1$TLS[lab1$TLS == \"\"] &lt;- NA\nlab2$TLS[lab2$TLS == \"\"] &lt;- NA\nspe$anno1 &lt;- factor(NA, unique(lab1$TLS))\nspe$anno2 &lt;- factor(NA, unique(lab2$TLS))\nlab2 &lt;- cbind(lab2, lab1[, c(\"Barcode\", \"Patient_ID\")])\nidx0 &lt;- split(seq(ncol(spe)), spe$sample_id)\nlab1 &lt;- split(lab1, lab1$Patient_ID)\nlab2 &lt;- split(lab2, lab2$Patient_ID)\nfor (. in names(ids)) {\n    bcs1 &lt;- gsub(\"-[0-9]$\", \"-1\", lab1[[.]]$Barcode)\n    bcs2 &lt;- gsub(\"-[0-9]$\", \"-1\", lab2[[.]]$Barcode)\n    bcs0 &lt;- spe$barcode[idx0[[.]]]\n    idx1 &lt;- match(bcs0, bcs1)\n    idx2 &lt;- match(bcs0, bcs2)\n    spe$anno1[idx0[[.]]] &lt;- lab1[[.]]$TLS[idx1]\n    spe$anno2[idx0[[.]]] &lt;- lab2[[.]]$TLS[idx2]\n}\ntable(spe$sample_id, spe$anno1)\n\n\n           \n             NOR  TUM INFL  TLS EXCL   LN\n  B04_17776 1664  585  141  161    0    0\n  B05_32288  574  355  136   80    0    0\n  B05_8527   330 1089   40   43   87    0\n  B06_24137 1137 1042   62  407    0   33\n  B06_24784 1126  718  178  138    0    0\n  B07_30616  266  491    6   32    0    0\n  B07_38596  493  593   27   96  977    0\n  B15_11190  160  364   39   27    0    0\n\n\nCode\ntable(spe$sample_id, spe$anno2)[1:5, 1:6]\n\n\n           \n             NOR  TUM INFL 17776_MTLS3 17776_ETLS11 17776_ETLS12\n  B04_17776 1664  585  140          28           22           27\n  B05_32288  587  355  126           0            0            0\n  B05_8527   330 1089   40           0            0            0\n  B06_24137 1137 1042   62           0            0            0\n  B06_24784 1125  718  173           0            0            0\n\n\n\n\n\n\n\nCode\nrd &lt;- rowData(spe)\nrd$ensembl &lt;- rownames(spe)\nrownames(spe) &lt;- make.names(rd$symbol)\nspatialCoordsNames(spe) &lt;- c(\"x\", \"y\")\nspe$sample_id &lt;- factor(spe$sample_id)\n\n\n\n\nCode\nspe &lt;- logNormCounts(spe, transform = \"none\")\nspe &lt;- logNormCounts(spe, transform = \"log\")\n\n\n\n\n\n\n\n\nCode\n# add gene-(sample-) & spot-level QC summaries \nsub &lt;- split(seq(ncol(spe)), spe$sample_id)\nspe &lt;- addPerFeatureQC(spe, subsets = sub)\nspe &lt;- addPerCellQC(spe)\n# get tables of gene & spot metadata\nrd &lt;- .df(spe, margin = 1)\ncd &lt;- .df(spe, margin = 2)\n\n\n\n\n\n\nCode\ndr &lt;- rd %&gt;% \n    select(matches(\"subsets.*detected\")) %&gt;% \n    pivot_longer(everything()) %&gt;% \n    mutate(sample_id = gsub(\"subsets_(.*)_detected\", \"\\\\1\", name))\nggplot(dr, aes(value, col = sample_id)) &\n    labs(x = \"% of cells with non-zero count\") &\n    geom_density(key_glyph = \"point\") & scale_x_sqrt() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(aspect.ratio = 2/3, \n        panel.grid.minor = element_blank(), \n        legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(total, col = sample_id)) +\nggplot(cd, aes(detected, col = sample_id)) +\nggplot(cd, aes(total, col = anno1)) +\nggplot(cd, aes(detected, col = anno1)) +\n    plot_layout(nrow = 2, guides = \"collect\") &\n    geom_density(key_glyph = \"point\") & scale_x_log10() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\ncd %&gt;% \n  group_by(sample_id) %&gt;% \n  mutate(total = .scale01(log10(total))) %&gt;% \n  ggplot(aes(x, y, col = total)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  scale_color_viridis_c() +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCode\ncd %&gt;% \n  ggplot(aes(x, y, col = anno1)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"bottom\") +\n  guides(col = guide_legend(nrow = 1, \n      override.aes = list(size = 3)))\n\n\n\n\n\n\n\nCode\nns &lt;- as.data.frame(table(sample_id = spe$sample_id, anno1 = spe$anno1))\nggplot(ns, aes(anno1, Freq, fill = anno1)) +\n    facet_wrap(~ sample_id, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid.minor = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\nCode\nggplot(ns, aes(sample_id, Freq, fill = sample_id)) +\n    facet_wrap(~ anno1, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n# drop genes/spots without \n# any detected spots/genes\ny &lt;- counts(spe) &gt; 1\nsub &lt;- spe[\n    rowSums(y) &gt; 1,\n    colSums(y) &gt; 1]\ncbind(\n    raw = dim(spe), \n    fil = dim(sub))\n\n       raw   fil\n[1,] 17878 16643\n[2,] 27732 27595\n\n\n\n\n\n\n\n\n\nCode\nsaveRDS(sub, \"../outs/01-spe.rds\")\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] SpatialExperiment_1.10.0    RColorBrewer_1.1-3         \n [3] patchwork_1.1.3             Matrix_1.6-1               \n [5] scater_1.28.0               ggplot2_3.4.3              \n [7] scran_1.28.2                scuttle_1.10.2             \n [9] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n[11] Biobase_2.60.0              GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.3         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] MatrixGenerics_1.12.3       matrixStats_1.0.0          \n[19] tidyr_1.3.0                 dplyr_1.1.3                \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7              gridExtra_2.3            \n [3] rlang_1.1.1               magrittr_2.0.3           \n [5] compiler_4.3.2            DelayedMatrixStats_1.22.6\n [7] vctrs_0.6.3               pkgconfig_2.0.3          \n [9] crayon_1.5.2              fastmap_1.1.1            \n[11] magick_2.7.5              XVector_0.40.0           \n[13] labeling_0.4.3            utf8_1.2.3               \n[15] rmarkdown_2.24            ggbeeswarm_0.7.2         \n[17] purrr_1.0.2               xfun_0.40                \n[19] bluster_1.10.0            zlibbioc_1.46.0          \n[21] beachmat_2.16.0           jsonlite_1.8.7           \n[23] rhdf5filters_1.12.1       DelayedArray_0.26.7      \n[25] Rhdf5lib_1.22.1           BiocParallel_1.34.2      \n[27] irlba_2.3.5.1             parallel_4.3.2           \n[29] cluster_2.1.5             R6_2.5.1                 \n[31] limma_3.56.2              Rcpp_1.0.11              \n[33] knitr_1.44                R.utils_2.12.2           \n[35] igraph_1.5.1              tidyselect_1.2.0         \n[37] rstudioapi_0.15.0         abind_1.4-5              \n[39] yaml_2.3.7                viridis_0.6.4            \n[41] codetools_0.2-19          lattice_0.22-5           \n[43] tibble_3.2.1              withr_2.5.1              \n[45] evaluate_0.21             pillar_1.9.0             \n[47] generics_0.1.3            RCurl_1.98-1.12          \n[49] sparseMatrixStats_1.12.2  munsell_0.5.0            \n[51] scales_1.2.1              glue_1.6.2               \n[53] metapod_1.8.0             tools_4.3.2              \n[55] BiocNeighbors_1.18.0      ScaledMatrix_1.8.1       \n[57] locfit_1.5-9.8            rhdf5_2.44.0             \n[59] grid_4.3.2                DropletUtils_1.20.0      \n[61] edgeR_3.42.4              colorspace_2.1-0         \n[63] GenomeInfoDbData_1.2.10   beeswarm_0.4.0           \n[65] BiocSingular_1.16.0       HDF5Array_1.28.1         \n[67] vipor_0.4.5               cli_3.6.1                \n[69] rsvd_1.0.5                fansi_1.0.4              \n[71] S4Arrays_1.0.6            viridisLite_0.4.2        \n[73] gtable_0.3.4              R.methodsS3_1.8.2        \n[75] digest_0.6.33             ggrepel_0.9.3            \n[77] dqrng_0.3.1               farver_2.1.1             \n[79] rjson_0.2.21              htmlwidgets_1.6.2        \n[81] htmltools_0.5.6           R.oo_1.25.0              \n[83] lifecycle_1.0.3           statmod_1.5.0"
  },
  {
    "objectID": "vis-01-quality.html#preamble",
    "href": "vis-01-quality.html#preamble",
    "title": "Quality",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(scran)\nlibrary(scater)\nlibrary(Matrix)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(RColorBrewer)\nlibrary(SpatialExperiment)\n\n\n\n\n\n\n\nCode\ndir &lt;- file.path(\"..\", \"data\", \"Visium\")\nids &lt;- list.dirs(dir, recursive = FALSE)\nids &lt;- ids[grep(\"^B[0-9]+\", basename(ids))]\nnames(ids) &lt;- gsub(\"_[0-9]*$\", \"\", basename(ids))\nspe &lt;- read10xVisium(ids, type = \"HDF5\", images = \"lowres\")\n# make barcodes/spot identifiers unique\nspe$barcode &lt;- colnames(spe); colnames(spe) &lt;- \n    paste(spe$sample_id, spe$barcode, sep = \".\")\n# sparsify counts\ny &lt;- as.matrix(assay(spe))\ny &lt;- as(y, \"dgCMatrix\")\nassay(spe) &lt;- y\n\n\n\n\nCode\nmd &lt;- read.csv(file.path(dir, \"metadata\", \"md.csv\"))\nmd &lt;- md[!is.na(md$Used.for.10x), ]\nmd$sample_id &lt;- gsub(\"-\", \"_\", md$B.number)\nidx &lt;- match(spe$sample_id, md$sample_id)\ntable(spe$TumorType &lt;- factor(md$Tumor.type[idx]))\n\n\n\nccRCC  LSCC  LUAD \n 9564 16010  2158 \n\n\n\n\nCode\ncsv1 &lt;- file.path(dir, \"metadata\", \"labels_all.csv\")\ncsv2 &lt;- file.path(dir, \"metadata\", \"labels_tls.csv\")\nlab1 &lt;- read.csv(csv1, row.names = 1)\nlab2 &lt;- read.csv(csv2, row.names = 1)\nlab1$TLS[lab1$TLS == \"\"] &lt;- NA\nlab2$TLS[lab2$TLS == \"\"] &lt;- NA\nspe$anno1 &lt;- factor(NA, unique(lab1$TLS))\nspe$anno2 &lt;- factor(NA, unique(lab2$TLS))\nlab2 &lt;- cbind(lab2, lab1[, c(\"Barcode\", \"Patient_ID\")])\nidx0 &lt;- split(seq(ncol(spe)), spe$sample_id)\nlab1 &lt;- split(lab1, lab1$Patient_ID)\nlab2 &lt;- split(lab2, lab2$Patient_ID)\nfor (. in names(ids)) {\n    bcs1 &lt;- gsub(\"-[0-9]$\", \"-1\", lab1[[.]]$Barcode)\n    bcs2 &lt;- gsub(\"-[0-9]$\", \"-1\", lab2[[.]]$Barcode)\n    bcs0 &lt;- spe$barcode[idx0[[.]]]\n    idx1 &lt;- match(bcs0, bcs1)\n    idx2 &lt;- match(bcs0, bcs2)\n    spe$anno1[idx0[[.]]] &lt;- lab1[[.]]$TLS[idx1]\n    spe$anno2[idx0[[.]]] &lt;- lab2[[.]]$TLS[idx2]\n}\ntable(spe$sample_id, spe$anno1)\n\n\n           \n             NOR  TUM INFL  TLS EXCL   LN\n  B04_17776 1664  585  141  161    0    0\n  B05_32288  574  355  136   80    0    0\n  B05_8527   330 1089   40   43   87    0\n  B06_24137 1137 1042   62  407    0   33\n  B06_24784 1126  718  178  138    0    0\n  B07_30616  266  491    6   32    0    0\n  B07_38596  493  593   27   96  977    0\n  B15_11190  160  364   39   27    0    0\n\n\nCode\ntable(spe$sample_id, spe$anno2)[1:5, 1:6]\n\n\n           \n             NOR  TUM INFL 17776_MTLS3 17776_ETLS11 17776_ETLS12\n  B04_17776 1664  585  140          28           22           27\n  B05_32288  587  355  126           0            0            0\n  B05_8527   330 1089   40           0            0            0\n  B06_24137 1137 1042   62           0            0            0\n  B06_24784 1125  718  173           0            0            0\n\n\n\n\n\n\n\nCode\nrd &lt;- rowData(spe)\nrd$ensembl &lt;- rownames(spe)\nrownames(spe) &lt;- make.names(rd$symbol)\nspatialCoordsNames(spe) &lt;- c(\"x\", \"y\")\nspe$sample_id &lt;- factor(spe$sample_id)\n\n\n\n\nCode\nspe &lt;- logNormCounts(spe, transform = \"none\")\nspe &lt;- logNormCounts(spe, transform = \"log\")"
  },
  {
    "objectID": "vis-01-quality.html#quality-1",
    "href": "vis-01-quality.html#quality-1",
    "title": "Quality",
    "section": "",
    "text": "Code\n# add gene-(sample-) & spot-level QC summaries \nsub &lt;- split(seq(ncol(spe)), spe$sample_id)\nspe &lt;- addPerFeatureQC(spe, subsets = sub)\nspe &lt;- addPerCellQC(spe)\n# get tables of gene & spot metadata\nrd &lt;- .df(spe, margin = 1)\ncd &lt;- .df(spe, margin = 2)\n\n\n\n\n\n\nCode\ndr &lt;- rd %&gt;% \n    select(matches(\"subsets.*detected\")) %&gt;% \n    pivot_longer(everything()) %&gt;% \n    mutate(sample_id = gsub(\"subsets_(.*)_detected\", \"\\\\1\", name))\nggplot(dr, aes(value, col = sample_id)) &\n    labs(x = \"% of cells with non-zero count\") &\n    geom_density(key_glyph = \"point\") & scale_x_sqrt() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(aspect.ratio = 2/3, \n        panel.grid.minor = element_blank(), \n        legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\n\n\n\nCode\nggplot(cd, aes(total, col = sample_id)) +\nggplot(cd, aes(detected, col = sample_id)) +\nggplot(cd, aes(total, col = anno1)) +\nggplot(cd, aes(detected, col = anno1)) +\n    plot_layout(nrow = 2, guides = \"collect\") &\n    geom_density(key_glyph = \"point\") & scale_x_log10() & \n    guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) &\n    theme_bw() & theme(legend.key.size = unit(0.5, \"lines\")) \n\n\n\n\n\n\n\nCode\ncd %&gt;% \n  group_by(sample_id) %&gt;% \n  mutate(total = .scale01(log10(total))) %&gt;% \n  ggplot(aes(x, y, col = total)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  scale_color_viridis_c() +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nCode\ncd %&gt;% \n  ggplot(aes(x, y, col = anno1)) +\n  geom_point(shape = 16, size = 1) +\n  facet_wrap(~ sample_id, nrow = 2) +\n  coord_equal() + theme_void() +\n  theme(legend.position = \"bottom\") +\n  guides(col = guide_legend(nrow = 1, \n      override.aes = list(size = 3)))\n\n\n\n\n\n\n\nCode\nns &lt;- as.data.frame(table(sample_id = spe$sample_id, anno1 = spe$anno1))\nggplot(ns, aes(anno1, Freq, fill = anno1)) +\n    facet_wrap(~ sample_id, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid.minor = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\nCode\nggplot(ns, aes(sample_id, Freq, fill = sample_id)) +\n    facet_wrap(~ anno1, scales = \"free_y\", nrow = 2) +\n    geom_bar(stat = \"identity\", position = \"dodge\") +\n    labs(y = \"# spots\") + theme_bw() + theme(\n        panel.grid = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"),\n        axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "vis-01-quality.html#filtering",
    "href": "vis-01-quality.html#filtering",
    "title": "Quality",
    "section": "",
    "text": "# drop genes/spots without \n# any detected spots/genes\ny &lt;- counts(spe) &gt; 1\nsub &lt;- spe[\n    rowSums(y) &gt; 1,\n    colSums(y) &gt; 1]\ncbind(\n    raw = dim(spe), \n    fil = dim(sub))\n\n       raw   fil\n[1,] 17878 16643\n[2,] 27732 27595"
  },
  {
    "objectID": "vis-01-quality.html#appendix",
    "href": "vis-01-quality.html#appendix",
    "title": "Quality",
    "section": "",
    "text": "Code\nsaveRDS(sub, \"../outs/01-spe.rds\")\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] SpatialExperiment_1.10.0    RColorBrewer_1.1-3         \n [3] patchwork_1.1.3             Matrix_1.6-1               \n [5] scater_1.28.0               ggplot2_3.4.3              \n [7] scran_1.28.2                scuttle_1.10.2             \n [9] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n[11] Biobase_2.60.0              GenomicRanges_1.52.0       \n[13] GenomeInfoDb_1.36.3         IRanges_2.34.1             \n[15] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[17] MatrixGenerics_1.12.3       matrixStats_1.0.0          \n[19] tidyr_1.3.0                 dplyr_1.1.3                \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7              gridExtra_2.3            \n [3] rlang_1.1.1               magrittr_2.0.3           \n [5] compiler_4.3.2            DelayedMatrixStats_1.22.6\n [7] vctrs_0.6.3               pkgconfig_2.0.3          \n [9] crayon_1.5.2              fastmap_1.1.1            \n[11] magick_2.7.5              XVector_0.40.0           \n[13] labeling_0.4.3            utf8_1.2.3               \n[15] rmarkdown_2.24            ggbeeswarm_0.7.2         \n[17] purrr_1.0.2               xfun_0.40                \n[19] bluster_1.10.0            zlibbioc_1.46.0          \n[21] beachmat_2.16.0           jsonlite_1.8.7           \n[23] rhdf5filters_1.12.1       DelayedArray_0.26.7      \n[25] Rhdf5lib_1.22.1           BiocParallel_1.34.2      \n[27] irlba_2.3.5.1             parallel_4.3.2           \n[29] cluster_2.1.5             R6_2.5.1                 \n[31] limma_3.56.2              Rcpp_1.0.11              \n[33] knitr_1.44                R.utils_2.12.2           \n[35] igraph_1.5.1              tidyselect_1.2.0         \n[37] rstudioapi_0.15.0         abind_1.4-5              \n[39] yaml_2.3.7                viridis_0.6.4            \n[41] codetools_0.2-19          lattice_0.22-5           \n[43] tibble_3.2.1              withr_2.5.1              \n[45] evaluate_0.21             pillar_1.9.0             \n[47] generics_0.1.3            RCurl_1.98-1.12          \n[49] sparseMatrixStats_1.12.2  munsell_0.5.0            \n[51] scales_1.2.1              glue_1.6.2               \n[53] metapod_1.8.0             tools_4.3.2              \n[55] BiocNeighbors_1.18.0      ScaledMatrix_1.8.1       \n[57] locfit_1.5-9.8            rhdf5_2.44.0             \n[59] grid_4.3.2                DropletUtils_1.20.0      \n[61] edgeR_3.42.4              colorspace_2.1-0         \n[63] GenomeInfoDbData_1.2.10   beeswarm_0.4.0           \n[65] BiocSingular_1.16.0       HDF5Array_1.28.1         \n[67] vipor_0.4.5               cli_3.6.1                \n[69] rsvd_1.0.5                fansi_1.0.4              \n[71] S4Arrays_1.0.6            viridisLite_0.4.2        \n[73] gtable_0.3.4              R.methodsS3_1.8.2        \n[75] digest_0.6.33             ggrepel_0.9.3            \n[77] dqrng_0.3.1               farver_2.1.1             \n[79] rjson_0.2.21              htmlwidgets_1.6.2        \n[81] htmltools_0.5.6           R.oo_1.25.0              \n[83] lifecycle_1.0.3           statmod_1.5.0"
  },
  {
    "objectID": "vis-02-exploratory.html",
    "href": "vis-02-exploratory.html",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(scran)\nlibrary(scater)\nlibrary(harmony)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(patchwork)\nlibrary(BiocParallel)\nlibrary(SpatialExperiment)\n\n\n\n\nCode\nbp &lt;- MulticoreParam(5)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")\n# exclude unassigned & \n# spots tagged for exclusion\nnan &lt;- is.na(spe$anno1)\nrmv &lt;- grepl(\"EXCL\", spe$anno1)\nsub &lt;- spe[, !(nan | rmv)]\nsub$anno1 &lt;- droplevels(sub$anno1)\ntable(sub$sample_id, sub$anno1)\n\n\n           \n             NOR  TUM INFL  TLS   LN\n  B04_17776 1663  585  141  161    0\n  B05_32288  574  351  120   80    0\n  B05_8527   330 1089   39   43    0\n  B06_24137 1137 1042   62  404   33\n  B06_24784 1126  718  178  138    0\n  B07_30616  266  491    6   32    0\n  B07_38596  493  593   27   96    0\n  B15_11190  160  364   39   27    0\n\n\n\n\n\n\n\nCode\nidx &lt;- sub$TumorType == \"ccRCC\"\nidx &lt;- split(seq(ncol(sub)), idx)\nnames(idx) &lt;- c(\"lun\", \"kid\")\nlys &lt;- lapply(idx, \\(.) sub[, .])\n\n\n\n\n\n\n\n\nCode\nnames(ids) &lt;- ids &lt;- c(\"anno1\", \"anno2\")\npbs &lt;- lapply(ids, \\(.) {\n  y &lt;- aggregateAcrossCells(sub, colData(sub)[c(\"sample_id\", .)])\n  z &lt;- calcNormFactors(DGEList(assay(y), remove.zeros = FALSE))\n  assay(y, \"normcounts\", FALSE) &lt;- cpm.DGEList(z, log = FALSE)\n  assay(y, \"logcounts\" , FALSE) &lt;- cpm.DGEList(z, log = TRUE )\n  mds &lt;- plotMDS.DGEList(z, plot = FALSE)\n  mds &lt;- data.frame(MDS1 = mds$x, MDS2 = mds$y)\n  reducedDim(y, \"MDS\") &lt;- as.matrix(mds)\n  colnames(y) &lt;- seq(ncol(y)); return(y)\n})\n\n\n\nlow-res.high-res.\n\n\n\n\nCode\nplotMDS(pbs$anno1, color_by=\"anno1\") +\nplotMDS(pbs$anno1, color_by=\"TumorType\") +\nplotMDS(pbs$anno1, color_by=\"sample_id\") +\nplot_layout(nrow = 1) & coord_equal()\n\n\n\n\n\n\n\n\n\nCode\npbs$anno3 &lt;- pbs$anno2\npbs$anno3$anno3 &lt;- as.character(pbs$anno3$anno2)\npbs$anno3$anno3[grep(\".*MTLS\", pbs$anno3$anno3)] &lt;- \"MTLS\"\npbs$anno3$anno3[grep(\".*ETLS\", pbs$anno3$anno3)] &lt;- \"ETLS\"\nplotMDS(pbs$anno3, color_by=\"anno3\") +\nplotMDS(pbs$anno3, color_by=\"TumorType\") +\nplotMDS(pbs$anno3, color_by=\"sample_id\") +\nplot_layout(nrow = 1) & coord_equal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfor (tmp in lys) {\n  mgs &lt;- findMarkers(tmp,\n    block = tmp$sample_id,\n    groups = droplevels(tmp$anno1),\n    direction = \"up\",\n    BPPARAM = bp)\n  top &lt;- lapply(mgs, \\(df) {\n    fil &lt;- df$Top &lt;= 10\n    rownames(df)[fil]\n  })\n  length(top &lt;- unique(unlist(top)))\n  cd &lt;- c(\"TumorType\", \"sample_id\", \"anno1\")\n  cd &lt;- data.frame(colData(tmp)[cd])\n  # pheatmap(\n  #     logcounts(tmp)[c(\"CLU\", \"CORO1A\", top), ],\n  #     show_colnames = FALSE,\n  #     cluster_rows = FALSE,\n  #     annotation_col = cd,\n  #     scale = \"none\")\n  pheatmap(logcounts(pbs$anno1)[c(\"CLU\", top), pbs$anno1$TumorType == \"LSCC\"], \n    annotation_col = data.frame(colData(pbs$anno1)[c(\"sample_id\", \"anno1\")]), \n    scale = \"row\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndge &lt;- readRDS(\"../outs/02-dge.rds\")\nfor (tt in c(\"RCC\", \"LSCC\")) {\n  dgf &lt;- dge[dge$subset == tt & dge$FDR &lt; 0.05 & dge$logFC &gt; 1, ]\n  tt &lt;- ifelse(tt == \"RCC\", \"kid\", \"lun\")\n  cd &lt;- c(\"TumorType\", \"sample_id\", \"anno1\")\n  cd &lt;- data.frame(colData(lys[[tt]])[cd])\n  gs &lt;- intersect(dgf$gene, rownames(lys[[tt]]))\n  pheatmap(\n      logcounts(lys[[tt]])[gs, ],\n      show_colnames = FALSE,\n      annotation_col = cd,\n      scale = \"none\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlys &lt;- lapply(lys, \\(.) {\n    tbl &lt;- modelGeneVar(., block = .$sample_id, BPPARAM = bp)\n    rowData(.)$hvg &lt;- hvg &lt;- tbl$bio &gt; 0\n    runPCA(., subset_row = hvg, BPPARAM = bp)\n})\n\n\n\n\n\n\n\nCode\nset.seed(29)\nlys &lt;- lapply(lys, \\(.) {\n    emb &lt;- HarmonyMatrix(\n        reducedDim(., \"PCA\"),\n        do_pca = FALSE, verbose = FALSE,\n        meta_data = droplevels(.$sample_id))\n    reducedDim(., \"EMB\") &lt;- emb\n    colnames(emb) &lt;- paste0(\"EMB\", seq(ncol(emb)))\n    . &lt;- runUMAP(., dimred = \"EMB\", BPPARAM = bp)\n    map &lt;- reducedDim(., \"UMAP\")\n    colnames(map) &lt;- paste0(\"UMAP\", seq(ncol(map)))\n    return(.)\n})\n\n\n\n\n\n\n\nCode\nset.seed(94)\ncd &lt;- lapply(lys, \\(.) {\n    df &lt;- .df(., margin = 2)\n    df[sample(nrow(df)), ]\n})\n\n\n\n\n\nlunkid\n\n\n\n\n\n\n\n\n\n\n\nCode\npal &lt;- list(\n  TumorType = c(LSCC = \"black\", LUAD = \"black\", RCC = \"grey\"),\n  sample_id = c(\n      setNames(hcl.colors(3, \"reds\"), unique(spe$sample_id[spe$TumorType == \"ccRCC\"])),\n      setNames(hcl.colors(5, \"blues\"), unique(spe$sample_id[spe$TumorType != \"ccRCC\"]))))\nn &lt;- length(l &lt;- unique(spe$label))\ntmp &lt;- setNames(hcl.colors(n, \"spectral\"), l)\npal &lt;- c(pal, list(label = tmp))\n\n\n\n\n\n\n\nCode\nids &lt;- colData(spe)[c(\"sample_id\", \"anno1\")]\nhvg &lt;- rowAnys(sapply(lys, \\(.) rowData(.)$hvg))\npbs &lt;- aggregateAcrossCells(spe, ids, subset_row = hvg)\ndgl &lt;- edgeR::calcNormFactors(edgeR::DGEList(assay(pbs)))\nmds &lt;- edgeR::plotMDS.DGEList(dgl, plot = FALSE)\nmds &lt;- data.frame(MDS1 = mds$x, MDS2 = mds$y)\nreducedDim(pbs, \"MDS\") &lt;- as.matrix(mds)\n\n\n\n\nCode\nlapply(\n    c(\"TumorType\", \"sample_id\", \"anno1\"), \\(.)\n    plotMDS(pbs, point_alpha = 0.8, point_size = 2, color_by = .)) |&gt;\n    wrap_plots(nrow = 1) &\n    guides(color = guide_legend(\n        override.aes = list(alpha = 1, size = 2))) &\n    coord_equal() & theme_bw() & theme(\n        panel.grid.minor = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"))\n\n\n\n\n\n\n\nCode\nlapply(names(cd),\\(.)\n  ggplot(cd[[.]], aes(UMAP1, UMAP2, col = sample_id)) +\n    #facet_grid(~ TumorType, scales = \"free\") +\n    geom_point(size = 0.5, alpha = 0.5) +\n    scale_color_brewer(palette = \"Set2\") +\n    ggtitle(.) +\n    theme_void() + theme(aspect.ratio = 1)) |&gt; \n  wrap_plots(nrow = 1)"
  },
  {
    "objectID": "vis-02-exploratory.html#preamble",
    "href": "vis-02-exploratory.html#preamble",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nlibrary(edgeR)\nlibrary(scran)\nlibrary(scater)\nlibrary(harmony)\nlibrary(ggplot2)\nlibrary(pheatmap)\nlibrary(patchwork)\nlibrary(BiocParallel)\nlibrary(SpatialExperiment)\n\n\n\n\nCode\nbp &lt;- MulticoreParam(5)\n\n\n\n\n\n\n\nCode\nspe &lt;- readRDS(\"../outs/01-spe.rds\")\n# exclude unassigned & \n# spots tagged for exclusion\nnan &lt;- is.na(spe$anno1)\nrmv &lt;- grepl(\"EXCL\", spe$anno1)\nsub &lt;- spe[, !(nan | rmv)]\nsub$anno1 &lt;- droplevels(sub$anno1)\ntable(sub$sample_id, sub$anno1)\n\n\n           \n             NOR  TUM INFL  TLS   LN\n  B04_17776 1663  585  141  161    0\n  B05_32288  574  351  120   80    0\n  B05_8527   330 1089   39   43    0\n  B06_24137 1137 1042   62  404   33\n  B06_24784 1126  718  178  138    0\n  B07_30616  266  491    6   32    0\n  B07_38596  493  593   27   96    0\n  B15_11190  160  364   39   27    0\n\n\n\n\n\n\n\nCode\nidx &lt;- sub$TumorType == \"ccRCC\"\nidx &lt;- split(seq(ncol(sub)), idx)\nnames(idx) &lt;- c(\"lun\", \"kid\")\nlys &lt;- lapply(idx, \\(.) sub[, .])"
  },
  {
    "objectID": "vis-02-exploratory.html#bulking",
    "href": "vis-02-exploratory.html#bulking",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nnames(ids) &lt;- ids &lt;- c(\"anno1\", \"anno2\")\npbs &lt;- lapply(ids, \\(.) {\n  y &lt;- aggregateAcrossCells(sub, colData(sub)[c(\"sample_id\", .)])\n  z &lt;- calcNormFactors(DGEList(assay(y), remove.zeros = FALSE))\n  assay(y, \"normcounts\", FALSE) &lt;- cpm.DGEList(z, log = FALSE)\n  assay(y, \"logcounts\" , FALSE) &lt;- cpm.DGEList(z, log = TRUE )\n  mds &lt;- plotMDS.DGEList(z, plot = FALSE)\n  mds &lt;- data.frame(MDS1 = mds$x, MDS2 = mds$y)\n  reducedDim(y, \"MDS\") &lt;- as.matrix(mds)\n  colnames(y) &lt;- seq(ncol(y)); return(y)\n})\n\n\n\nlow-res.high-res.\n\n\n\n\nCode\nplotMDS(pbs$anno1, color_by=\"anno1\") +\nplotMDS(pbs$anno1, color_by=\"TumorType\") +\nplotMDS(pbs$anno1, color_by=\"sample_id\") +\nplot_layout(nrow = 1) & coord_equal()\n\n\n\n\n\n\n\n\n\nCode\npbs$anno3 &lt;- pbs$anno2\npbs$anno3$anno3 &lt;- as.character(pbs$anno3$anno2)\npbs$anno3$anno3[grep(\".*MTLS\", pbs$anno3$anno3)] &lt;- \"MTLS\"\npbs$anno3$anno3[grep(\".*ETLS\", pbs$anno3$anno3)] &lt;- \"ETLS\"\nplotMDS(pbs$anno3, color_by=\"anno3\") +\nplotMDS(pbs$anno3, color_by=\"TumorType\") +\nplotMDS(pbs$anno3, color_by=\"sample_id\") +\nplot_layout(nrow = 1) & coord_equal()"
  },
  {
    "objectID": "vis-02-exploratory.html#markers",
    "href": "vis-02-exploratory.html#markers",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nfor (tmp in lys) {\n  mgs &lt;- findMarkers(tmp,\n    block = tmp$sample_id,\n    groups = droplevels(tmp$anno1),\n    direction = \"up\",\n    BPPARAM = bp)\n  top &lt;- lapply(mgs, \\(df) {\n    fil &lt;- df$Top &lt;= 10\n    rownames(df)[fil]\n  })\n  length(top &lt;- unique(unlist(top)))\n  cd &lt;- c(\"TumorType\", \"sample_id\", \"anno1\")\n  cd &lt;- data.frame(colData(tmp)[cd])\n  # pheatmap(\n  #     logcounts(tmp)[c(\"CLU\", \"CORO1A\", top), ],\n  #     show_colnames = FALSE,\n  #     cluster_rows = FALSE,\n  #     annotation_col = cd,\n  #     scale = \"none\")\n  pheatmap(logcounts(pbs$anno1)[c(\"CLU\", top), pbs$anno1$TumorType == \"LSCC\"], \n    annotation_col = data.frame(colData(pbs$anno1)[c(\"sample_id\", \"anno1\")]), \n    scale = \"row\")\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndge &lt;- readRDS(\"../outs/02-dge.rds\")\nfor (tt in c(\"RCC\", \"LSCC\")) {\n  dgf &lt;- dge[dge$subset == tt & dge$FDR &lt; 0.05 & dge$logFC &gt; 1, ]\n  tt &lt;- ifelse(tt == \"RCC\", \"kid\", \"lun\")\n  cd &lt;- c(\"TumorType\", \"sample_id\", \"anno1\")\n  cd &lt;- data.frame(colData(lys[[tt]])[cd])\n  gs &lt;- intersect(dgf$gene, rownames(lys[[tt]]))\n  pheatmap(\n      logcounts(lys[[tt]])[gs, ],\n      show_colnames = FALSE,\n      annotation_col = cd,\n      scale = \"none\")\n}"
  },
  {
    "objectID": "vis-02-exploratory.html#selection",
    "href": "vis-02-exploratory.html#selection",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nlys &lt;- lapply(lys, \\(.) {\n    tbl &lt;- modelGeneVar(., block = .$sample_id, BPPARAM = bp)\n    rowData(.)$hvg &lt;- hvg &lt;- tbl$bio &gt; 0\n    runPCA(., subset_row = hvg, BPPARAM = bp)\n})"
  },
  {
    "objectID": "vis-02-exploratory.html#integration",
    "href": "vis-02-exploratory.html#integration",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nset.seed(29)\nlys &lt;- lapply(lys, \\(.) {\n    emb &lt;- HarmonyMatrix(\n        reducedDim(., \"PCA\"),\n        do_pca = FALSE, verbose = FALSE,\n        meta_data = droplevels(.$sample_id))\n    reducedDim(., \"EMB\") &lt;- emb\n    colnames(emb) &lt;- paste0(\"EMB\", seq(ncol(emb)))\n    . &lt;- runUMAP(., dimred = \"EMB\", BPPARAM = bp)\n    map &lt;- reducedDim(., \"UMAP\")\n    colnames(map) &lt;- paste0(\"UMAP\", seq(ncol(map)))\n    return(.)\n})"
  },
  {
    "objectID": "vis-02-exploratory.html#visualization",
    "href": "vis-02-exploratory.html#visualization",
    "title": "Exploratory",
    "section": "",
    "text": "Code\nset.seed(94)\ncd &lt;- lapply(lys, \\(.) {\n    df &lt;- .df(., margin = 2)\n    df[sample(nrow(df)), ]\n})\n\n\n\n\n\nlunkid\n\n\n\n\n\n\n\n\n\n\n\nCode\npal &lt;- list(\n  TumorType = c(LSCC = \"black\", LUAD = \"black\", RCC = \"grey\"),\n  sample_id = c(\n      setNames(hcl.colors(3, \"reds\"), unique(spe$sample_id[spe$TumorType == \"ccRCC\"])),\n      setNames(hcl.colors(5, \"blues\"), unique(spe$sample_id[spe$TumorType != \"ccRCC\"]))))\nn &lt;- length(l &lt;- unique(spe$label))\ntmp &lt;- setNames(hcl.colors(n, \"spectral\"), l)\npal &lt;- c(pal, list(label = tmp))\n\n\n\n\n\n\n\nCode\nids &lt;- colData(spe)[c(\"sample_id\", \"anno1\")]\nhvg &lt;- rowAnys(sapply(lys, \\(.) rowData(.)$hvg))\npbs &lt;- aggregateAcrossCells(spe, ids, subset_row = hvg)\ndgl &lt;- edgeR::calcNormFactors(edgeR::DGEList(assay(pbs)))\nmds &lt;- edgeR::plotMDS.DGEList(dgl, plot = FALSE)\nmds &lt;- data.frame(MDS1 = mds$x, MDS2 = mds$y)\nreducedDim(pbs, \"MDS\") &lt;- as.matrix(mds)\n\n\n\n\nCode\nlapply(\n    c(\"TumorType\", \"sample_id\", \"anno1\"), \\(.)\n    plotMDS(pbs, point_alpha = 0.8, point_size = 2, color_by = .)) |&gt;\n    wrap_plots(nrow = 1) &\n    guides(color = guide_legend(\n        override.aes = list(alpha = 1, size = 2))) &\n    coord_equal() & theme_bw() & theme(\n        panel.grid.minor = element_blank(),\n        legend.key.size = unit(0.5, \"lines\"))\n\n\n\n\n\n\n\nCode\nlapply(names(cd),\\(.)\n  ggplot(cd[[.]], aes(UMAP1, UMAP2, col = sample_id)) +\n    #facet_grid(~ TumorType, scales = \"free\") +\n    geom_point(size = 0.5, alpha = 0.5) +\n    scale_color_brewer(palette = \"Set2\") +\n    ggtitle(.) +\n    theme_void() + theme(aspect.ratio = 1)) |&gt; \n  wrap_plots(nrow = 1)"
  },
  {
    "objectID": "vis-02-exploratory.html#appendix",
    "href": "vis-02-exploratory.html#appendix",
    "title": "Exploratory",
    "section": "Appendix",
    "text": "Appendix\n\n\nCode\nsaveRDS(spe, file.path(\"..\", \"outs\", \"02-spe.rds\"))\n\n\n\n\n\n\n\n\nSession info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.6 LTS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 \nLAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Zurich\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats4    stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] tidyr_1.3.0                 dplyr_1.1.3                \n [3] SpatialExperiment_1.10.0    BiocParallel_1.34.2        \n [5] patchwork_1.1.3             pheatmap_1.0.12            \n [7] harmony_1.0.3               Rcpp_1.0.11                \n [9] scater_1.28.0               ggplot2_3.4.3              \n[11] scran_1.28.2                scuttle_1.10.2             \n[13] SingleCellExperiment_1.22.0 SummarizedExperiment_1.30.2\n[15] Biobase_2.60.0              GenomicRanges_1.52.0       \n[17] GenomeInfoDb_1.36.3         IRanges_2.34.1             \n[19] S4Vectors_0.38.1            BiocGenerics_0.46.0        \n[21] MatrixGenerics_1.12.3       matrixStats_1.0.0          \n[23] edgeR_3.42.4                limma_3.56.2               \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-7              gridExtra_2.3            \n [3] rlang_1.1.1               magrittr_2.0.3           \n [5] RcppAnnoy_0.0.21          compiler_4.3.2           \n [7] DelayedMatrixStats_1.22.6 vctrs_0.6.3              \n [9] pkgconfig_2.0.3           crayon_1.5.2             \n[11] fastmap_1.1.1             magick_2.7.5             \n[13] XVector_0.40.0            labeling_0.4.3           \n[15] utf8_1.2.3                rmarkdown_2.24           \n[17] ggbeeswarm_0.7.2          purrr_1.0.2              \n[19] xfun_0.40                 bluster_1.10.0           \n[21] zlibbioc_1.46.0           beachmat_2.16.0          \n[23] jsonlite_1.8.7            rhdf5filters_1.12.1      \n[25] DelayedArray_0.26.7       Rhdf5lib_1.22.1          \n[27] irlba_2.3.5.1             parallel_4.3.2           \n[29] cluster_2.1.5             R6_2.5.1                 \n[31] RColorBrewer_1.1-3        knitr_1.44               \n[33] R.utils_2.12.2            Matrix_1.6-1             \n[35] igraph_1.5.1              tidyselect_1.2.0         \n[37] rstudioapi_0.15.0         abind_1.4-5              \n[39] yaml_2.3.7                viridis_0.6.4            \n[41] codetools_0.2-19          lattice_0.22-5           \n[43] tibble_3.2.1              withr_2.5.1              \n[45] evaluate_0.21             pillar_1.9.0             \n[47] generics_0.1.3            RCurl_1.98-1.12          \n[49] sparseMatrixStats_1.12.2  munsell_0.5.0            \n[51] scales_1.2.1              RhpcBLASctl_0.23-42      \n[53] glue_1.6.2                metapod_1.8.0            \n[55] tools_4.3.2               BiocNeighbors_1.18.0     \n[57] ScaledMatrix_1.8.1        locfit_1.5-9.8           \n[59] cowplot_1.1.1             rhdf5_2.44.0             \n[61] grid_4.3.2                DropletUtils_1.20.0      \n[63] colorspace_2.1-0          GenomeInfoDbData_1.2.10  \n[65] beeswarm_0.4.0            BiocSingular_1.16.0      \n[67] HDF5Array_1.28.1          vipor_0.4.5              \n[69] cli_3.6.1                 rsvd_1.0.5               \n[71] fansi_1.0.4               S4Arrays_1.0.6           \n[73] viridisLite_0.4.2         uwot_0.1.16              \n[75] gtable_0.3.4              R.methodsS3_1.8.2        \n[77] digest_0.6.33             ggrepel_0.9.3            \n[79] dqrng_0.3.1               farver_2.1.1             \n[81] rjson_0.2.21              htmlwidgets_1.6.2        \n[83] R.oo_1.25.0               htmltools_0.5.6          \n[85] lifecycle_1.0.3           statmod_1.5.0"
  }
]